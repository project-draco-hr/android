import os, sys, re, errno
try:
    from json import loads as parse_json, dumps as compile_json
except ImportError:
    from simplejson import loads as parse_json, dumps as compile_json
import urllib2
from urls import API_URLS
from txclib.log import logger
from txclib.exceptions import UnknownCommandError
TX_URLS = {'resource': '(?P<hostname>https?://(\\w|\\.|:|-)+)/projects/p/(?P<project>(\\w|-)+)/resource/(?P<resource>(\\w|-)+)/?$', 'release': '(?P<hostname>https?://(\\w|\\.|:|-)+)/projects/p/(?P<project>(\\w|-)+)/r/(?P<release>(\\w|-)+)/?$', 'project': '(?P<hostname>https?://(\\w|\\.|:|-)+)/projects/p/(?P<project>(\\w|-)+)/?$', }
COLORS = ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE']
DISABLE_COLORS = False
if (not hasattr(os.path, 'relpath')):
    if (os.path is sys.modules.get('ntpath')):

        def relpath(path, start=os.path.curdir):
            'Return a relative version of a path'
            if (not path):
                raise ValueError('no path specified')
            start_list = os.path.abspath(start).split(os.path.sep)
            path_list = os.path.abspath(path).split(os.path.sep)
            if (start_list[0].lower() != path_list[0].lower()):
                (unc_path, rest) = os.path.splitunc(path)
                (unc_start, rest) = os.path.splitunc(start)
                if (bool(unc_path) ^ bool(unc_start)):
                    raise ValueError(('Cannot mix UNC and non-UNC paths (%s and %s)' % (path, start)))
                else:
                    raise ValueError(('path is on drive %s, start on drive %s' % (path_list[0], start_list[0])))
            for i in range(min(len(start_list), len(path_list))):
                if (start_list[i].lower() != path_list[i].lower()):
                    break
            else:
                i += 1
            rel_list = (([os.path.pardir] * (len(start_list) - i)) + path_list[i:])
            if (not rel_list):
                return os.path.curdir
            return os.path.join(*rel_list)
    else:

        def relpath(path, start=os.path.curdir):
            'Return a relative version of a path'
            if (not path):
                raise ValueError('no path specified')
            start_list = os.path.abspath(start).split(os.path.sep)
            path_list = os.path.abspath(path).split(os.path.sep)
            i = len(os.path.commonprefix([start_list, path_list]))
            rel_list = (([os.path.pardir] * (len(start_list) - i)) + path_list[i:])
            if (not rel_list):
                return os.path.curdir
            return os.path.join(*rel_list)
else:
    from os.path import relpath
