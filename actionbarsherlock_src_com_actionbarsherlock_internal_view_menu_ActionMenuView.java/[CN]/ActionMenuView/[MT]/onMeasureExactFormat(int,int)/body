{
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int widthPadding=getPaddingLeft() + getPaddingRight();
  final int heightPadding=getPaddingTop() + getPaddingBottom();
  widthSize-=widthPadding;
  final int cellCount=widthSize / mMinCellSize;
  final int cellSizeRemaining=widthSize % mMinCellSize;
  if (cellCount == 0) {
    setMeasuredDimension(widthSize,0);
    return;
  }
  final int cellSize=mMinCellSize + cellSizeRemaining / cellCount;
  int cellsRemaining=cellCount;
  int maxChildHeight=0;
  int maxCellsUsed=0;
  int expandableItemCount=0;
  int visibleItemCount=0;
  boolean hasOverflow=false;
  long smallestItemsAt=0;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE)     continue;
    final boolean isGeneratedItem=child instanceof ActionMenuItemView;
    visibleItemCount++;
    if (isGeneratedItem) {
      child.setPadding(mGeneratedItemPadding,0,mGeneratedItemPadding,0);
    }
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    lp.expanded=false;
    lp.extraPixels=0;
    lp.cellsUsed=0;
    lp.expandable=false;
    lp.leftMargin=0;
    lp.rightMargin=0;
    lp.preventEdgeOffset=isGeneratedItem && ((ActionMenuItemView)child).hasText();
    final int cellsAvailable=lp.isOverflowButton ? 1 : cellsRemaining;
    final int cellsUsed=measureChildForCells(child,cellSize,cellsAvailable,heightMeasureSpec,heightPadding);
    maxCellsUsed=Math.max(maxCellsUsed,cellsUsed);
    if (lp.expandable)     expandableItemCount++;
    if (lp.isOverflowButton)     hasOverflow=true;
    cellsRemaining-=cellsUsed;
    maxChildHeight=Math.max(maxChildHeight,child.getMeasuredHeight());
    if (cellsUsed == 1)     smallestItemsAt|=(1 << i);
  }
  final boolean centerSingleExpandedItem=hasOverflow && visibleItemCount == 2;
  boolean needsExpansion=false;
  while (expandableItemCount > 0 && cellsRemaining > 0) {
    int minCells=Integer.MAX_VALUE;
    long minCellsAt=0;
    int minCellsItemCount=0;
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.expandable)       continue;
      if (lp.cellsUsed < minCells) {
        minCells=lp.cellsUsed;
        minCellsAt=1 << i;
        minCellsItemCount=1;
      }
 else       if (lp.cellsUsed == minCells) {
        minCellsAt|=1 << i;
        minCellsItemCount++;
      }
    }
    smallestItemsAt|=minCellsAt;
    if (minCellsItemCount > cellsRemaining)     break;
    minCells++;
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if ((minCellsAt & (1 << i)) == 0) {
        if (lp.cellsUsed == minCells)         smallestItemsAt|=1 << i;
        continue;
      }
      if (centerSingleExpandedItem && lp.preventEdgeOffset && cellsRemaining == 1) {
        child.setPadding(mGeneratedItemPadding + cellSize,0,mGeneratedItemPadding,0);
      }
      lp.cellsUsed++;
      lp.expanded=true;
      cellsRemaining--;
    }
    needsExpansion=true;
  }
  final boolean singleItem=!hasOverflow && visibleItemCount == 1;
  if (cellsRemaining > 0 && smallestItemsAt != 0 && (cellsRemaining < visibleItemCount - 1 || singleItem || maxCellsUsed > 1)) {
    float expandCount=Long.bitCount(smallestItemsAt);
    if (!singleItem) {
      if ((smallestItemsAt & 1) != 0) {
        LayoutParams lp=(LayoutParams)getChildAt(0).getLayoutParams();
        if (!lp.preventEdgeOffset)         expandCount-=0.5f;
      }
      if ((smallestItemsAt & (1 << (childCount - 1))) != 0) {
        LayoutParams lp=((LayoutParams)getChildAt(childCount - 1).getLayoutParams());
        if (!lp.preventEdgeOffset)         expandCount-=0.5f;
      }
    }
    final int extraPixels=expandCount > 0 ? (int)(cellsRemaining * cellSize / expandCount) : 0;
    for (int i=0; i < childCount; i++) {
      if ((smallestItemsAt & (1 << i)) == 0)       continue;
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (child instanceof ActionMenuItemView) {
        lp.extraPixels=extraPixels;
        lp.expanded=true;
        if (i == 0 && !lp.preventEdgeOffset) {
          lp.leftMargin=-extraPixels / 2;
        }
        needsExpansion=true;
      }
 else       if (lp.isOverflowButton) {
        lp.extraPixels=extraPixels;
        lp.expanded=true;
        lp.rightMargin=-extraPixels / 2;
        needsExpansion=true;
      }
 else {
        if (i != 0) {
          lp.leftMargin=extraPixels / 2;
        }
        if (i != childCount - 1) {
          lp.rightMargin=extraPixels / 2;
        }
      }
    }
    cellsRemaining=0;
  }
  if (needsExpansion) {
    int heightSpec=MeasureSpec.makeMeasureSpec(heightSize - heightPadding,heightMode);
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.expanded)       continue;
      final int width=lp.cellsUsed * cellSize + lp.extraPixels;
      child.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),heightSpec);
    }
  }
  if (heightMode != MeasureSpec.EXACTLY) {
    heightSize=maxChildHeight;
  }
  setMeasuredDimension(widthSize,heightSize);
}
