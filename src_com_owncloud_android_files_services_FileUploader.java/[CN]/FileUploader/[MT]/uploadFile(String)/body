{
  mCurrentUpload=mPendingUploads.get(uploadKey);
  if (mCurrentUpload != null) {
    if (!AccountUtils.exists(mCurrentUpload.getAccount(),this)) {
      Log_OC.w(TAG,"Account " + mCurrentUpload.getAccount().name + " does not exist anymore -> cancelling all its uploads");
      cancelUploadsForAccount(mCurrentUpload.getAccount());
      return;
    }
    if (delayForWifi()) {
      return;
    }
    mUploadsStorageManager.updateDatabaseUploadStart(mCurrentUpload);
    notifyUploadStart(mCurrentUpload);
    RemoteOperationResult uploadResult=null;
    try {
      if (mCurrentAccount == null || !mCurrentAccount.equals(mCurrentUpload.getAccount())) {
        mCurrentAccount=mCurrentUpload.getAccount();
        mStorageManager=new FileDataStorageManager(mCurrentAccount,getContentResolver());
      }
      OwnCloudAccount ocAccount=new OwnCloudAccount(mCurrentAccount,this);
      mUploadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);
      uploadResult=mCurrentUpload.execute(mUploadClient,mStorageManager);
    }
 catch (    Exception e) {
      Log_OC.e(TAG,"Error uploading",e);
      uploadResult=new RemoteOperationResult(e);
    }
 finally {
      Pair<UploadFileOperation,String> removeResult;
      if (mCurrentUpload.wasRenamed()) {
        removeResult=mPendingUploads.removePayload(mCurrentAccount.name,mCurrentUpload.getOldFile().getRemotePath());
      }
 else {
        removeResult=mPendingUploads.removePayload(mCurrentAccount.name,mCurrentUpload.getRemotePath());
      }
      mUploadsStorageManager.updateDatabaseUploadResult(uploadResult,mCurrentUpload);
      notifyUploadResult(mCurrentUpload,uploadResult);
      sendBroadcastUploadFinished(mCurrentUpload,uploadResult,removeResult.second);
    }
  }
}
