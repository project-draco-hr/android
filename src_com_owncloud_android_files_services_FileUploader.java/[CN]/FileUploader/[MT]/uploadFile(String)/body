{
  Log_OC.v("NOW " + TAG + ", thread "+ Thread.currentThread().getName(),"Getting upload of " + uploadKey);
  mCurrentUpload=mPendingUploads.get(uploadKey);
  if (mCurrentUpload != null) {
    if (AccountUtils.exists(mCurrentUpload.getAccount(),getApplicationContext())) {
      Log_OC.d(TAG,"Account " + mCurrentUpload.getAccount().name + " exists");
      notifyUploadStart(mCurrentUpload);
      RemoteOperationResult uploadResult=null, grantResult;
      try {
        if (mCurrentAccount == null || !mCurrentAccount.equals(mCurrentUpload.getAccount())) {
          mCurrentAccount=mCurrentUpload.getAccount();
          mStorageManager=new FileDataStorageManager(mCurrentAccount,getContentResolver());
        }
        OwnCloudAccount ocAccount=new OwnCloudAccount(mCurrentAccount,this);
        mUploadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);
        String remoteParentPath=new File(mCurrentUpload.getRemotePath()).getParent();
        remoteParentPath=remoteParentPath.endsWith(OCFile.PATH_SEPARATOR) ? remoteParentPath : remoteParentPath + OCFile.PATH_SEPARATOR;
        grantResult=grantFolderExistence(remoteParentPath);
        if (grantResult.isSuccess()) {
          Log_OC.v("NOW " + TAG + ", thread "+ Thread.currentThread().getName(),"Executing upload of " + mCurrentUpload.getRemotePath());
          OCFile parent=mStorageManager.getFileByPath(remoteParentPath);
          mCurrentUpload.getFile().setParentId(parent.getFileId());
          uploadResult=mCurrentUpload.execute(mUploadClient);
          if (uploadResult.isSuccess()) {
            saveUploadedFile();
          }
        }
 else {
          uploadResult=grantResult;
        }
      }
 catch (      AccountsException e) {
        Log_OC.e(TAG,"Error while trying to get autorization for " + mCurrentAccount.name,e);
        uploadResult=new RemoteOperationResult(e);
      }
catch (      IOException e) {
        Log_OC.e(TAG,"Error while trying to get autorization for " + mCurrentAccount.name,e);
        uploadResult=new RemoteOperationResult(e);
      }
 finally {
        Log_OC.v("NOW " + TAG + ", thread "+ Thread.currentThread().getName(),"Removing payload " + mCurrentUpload.getRemotePath());
        Pair<UploadFileOperation,String> removeResult=mPendingUploads.removePayload(mCurrentAccount,mCurrentUpload.getRemotePath());
        notifyUploadResult(mCurrentUpload,uploadResult);
        sendBroadcastUploadFinished(mCurrentUpload,uploadResult,removeResult.second);
      }
    }
 else {
      Log_OC.d(TAG,"Account " + mCurrentUpload.getAccount().toString() + " doesn't exist");
      cancelUploadsForAccount(mCurrentUpload.getAccount());
    }
  }
}
