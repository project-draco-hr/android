{
  Log_OC.d(TAG,"NotifyUploadResult with resultCode: " + uploadResult.getCode());
  if (uploadResult.isCancelled()) {
    mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);
  }
 else   if (uploadResult.isSuccess()) {
    mNotification.flags^=Notification.FLAG_ONGOING_EVENT;
    mNotification.flags|=Notification.FLAG_AUTO_CANCEL;
    mNotification.contentView=mDefaultNotificationContentView;
    Intent showDetailsIntent=null;
    if (PreviewImageFragment.canBePreviewed(upload.getFile())) {
      showDetailsIntent=new Intent(this,PreviewImageActivity.class);
    }
 else {
      showDetailsIntent=new Intent(this,FileDetailActivity.class);
      showDetailsIntent.putExtra(FileDetailActivity.EXTRA_MODE,FileDetailActivity.MODE_DETAILS);
    }
    showDetailsIntent.putExtra(FileDetailFragment.EXTRA_FILE,upload.getFile());
    showDetailsIntent.putExtra(FileDetailFragment.EXTRA_ACCOUNT,upload.getAccount());
    showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    mNotification.contentIntent=PendingIntent.getActivity(getApplicationContext(),(int)System.currentTimeMillis(),showDetailsIntent,0);
    mNotification.setLatestEventInfo(getApplicationContext(),getString(R.string.uploader_upload_succeeded_ticker),String.format(getString(R.string.uploader_upload_succeeded_content_single),upload.getFileName()),mNotification.contentIntent);
    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotification);
    DbHandler db=new DbHandler(this.getBaseContext());
    db.removeIUPendingFile(mCurrentUpload.getFile().getStoragePath());
    db.close();
  }
 else {
    mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);
    Notification finalNotification=new Notification(R.drawable.icon,getString(R.string.uploader_upload_failed_ticker),System.currentTimeMillis());
    finalNotification.flags|=Notification.FLAG_AUTO_CANCEL;
    String content=null;
    if (uploadResult.getCode() == ResultCode.LOCAL_STORAGE_FULL || uploadResult.getCode() == ResultCode.LOCAL_STORAGE_NOT_COPIED) {
      content=String.format(getString(R.string.error__upload__local_file_not_copied),upload.getFileName(),getString(R.string.app_name));
    }
 else     if (uploadResult.getCode() == ResultCode.QUOTA_EXCEEDED) {
      content=getString(R.string.failed_upload_quota_exceeded_text);
    }
 else {
      content=String.format(getString(R.string.uploader_upload_failed_content_single),upload.getFileName());
    }
    Intent detailUploadIntent=null;
    if (upload.isInstant() && InstantUploadActivity.IS_ENABLED) {
      detailUploadIntent=new Intent(this,InstantUploadActivity.class);
      detailUploadIntent.putExtra(FileUploader.KEY_ACCOUNT,upload.getAccount());
    }
 else {
      detailUploadIntent=new Intent(this,FailedUploadActivity.class);
      detailUploadIntent.putExtra(FailedUploadActivity.MESSAGE,content);
    }
    finalNotification.contentIntent=PendingIntent.getActivity(getApplicationContext(),(int)System.currentTimeMillis(),detailUploadIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT);
    if (upload.isInstant()) {
      DbHandler db=null;
      try {
        db=new DbHandler(this.getBaseContext());
        String message=uploadResult.getLogMessage() + " errorCode: " + uploadResult.getCode();
        Log.e(TAG,message + " Http-Code: " + uploadResult.getHttpCode());
        if (uploadResult.getCode() == ResultCode.QUOTA_EXCEEDED) {
          message=getString(R.string.failed_upload_quota_exceeded_text);
        }
        if (db.updateFileState(upload.getOriginalStoragePath(),DbHandler.UPLOAD_STATUS_UPLOAD_FAILED,message) == 0) {
          db.putFileForLater(upload.getOriginalStoragePath(),upload.getAccount().name,message);
        }
      }
  finally {
        if (db != null) {
          db.close();
        }
      }
    }
    finalNotification.setLatestEventInfo(getApplicationContext(),getString(R.string.uploader_upload_failed_ticker),content,finalNotification.contentIntent);
    mNotificationManager.notify(R.string.uploader_upload_failed_ticker,finalNotification);
  }
}
