{
  Log_OC.d(TAG,"NotifyUploadResult with resultCode: " + uploadResult.getCode());
  if (uploadResult.isCancelled()) {
    mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);
  }
 else   if (uploadResult.isSuccess()) {
    mNotificationBuilder.setOngoing(false).setAutoCancel(true).setProgress(0,0,false);
    Intent showDetailsIntent=null;
    if (PreviewImageFragment.canBePreviewed(upload.getFile())) {
      showDetailsIntent=new Intent(this,PreviewImageActivity.class);
    }
 else {
      showDetailsIntent=new Intent(this,FileDisplayActivity.class);
    }
    showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,upload.getFile());
    showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,upload.getAccount());
    showDetailsIntent.putExtra(FileActivity.EXTRA_FROM_NOTIFICATION,true);
    ;
    mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0)).setTicker(getString(R.string.uploader_upload_succeeded_ticker)).setContentTitle(getString(R.string.uploader_upload_succeeded_ticker)).setContentText(String.format(getString(R.string.uploader_upload_succeeded_content_single),upload.getFileName()));
    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());
    DbHandler db=new DbHandler(this.getBaseContext());
    db.removeIUPendingFile(mCurrentUpload.getOriginalStoragePath());
    db.close();
  }
 else {
    mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);
    NotificationCompat.Builder errorBuilder=new NotificationCompat.Builder(this);
    errorBuilder.setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.uploader_upload_failed_ticker)).setContentTitle(getString(R.string.uploader_upload_failed_ticker)).setAutoCancel(true);
    String content=null;
    boolean needsToUpdateCredentials=(uploadResult.getCode() == ResultCode.UNAUTHORIZED || (uploadResult.isIdPRedirection() && mUploadClient.getCredentials() == null));
    if (needsToUpdateCredentials) {
      Intent updateAccountCredentials=new Intent(this,AuthenticatorActivity.class);
      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,upload.getAccount());
      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ENFORCED_UPDATE,true);
      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_TOKEN);
      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
      updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);
      errorBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT));
      content=String.format(getString(R.string.uploader_upload_failed_content_single),upload.getFileName());
      mUploadClient=null;
    }
 else {
      if (uploadResult.getCode() == ResultCode.LOCAL_STORAGE_FULL || uploadResult.getCode() == ResultCode.LOCAL_STORAGE_NOT_COPIED) {
        content=String.format(getString(R.string.error__upload__local_file_not_copied),upload.getFileName(),getString(R.string.app_name));
      }
 else       if (uploadResult.getCode() == ResultCode.QUOTA_EXCEEDED) {
        content=getString(R.string.failed_upload_quota_exceeded_text);
      }
 else {
        content=String.format(getString(R.string.uploader_upload_failed_content_single),upload.getFileName());
      }
      Intent detailUploadIntent=null;
      if (upload.isInstant() && InstantUploadActivity.IS_ENABLED) {
        detailUploadIntent=new Intent(this,InstantUploadActivity.class);
        detailUploadIntent.putExtra(FileUploader.KEY_ACCOUNT,upload.getAccount());
      }
 else {
        detailUploadIntent=new Intent(this,FailedUploadActivity.class);
        detailUploadIntent.putExtra(FailedUploadActivity.MESSAGE,content);
      }
      errorBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),detailUploadIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setContentText(content);
      if (upload.isInstant()) {
        DbHandler db=null;
        try {
          db=new DbHandler(this.getBaseContext());
          String message=uploadResult.getLogMessage() + " errorCode: " + uploadResult.getCode();
          Log_OC.e(TAG,message + " Http-Code: " + uploadResult.getHttpCode());
          if (uploadResult.getCode() == ResultCode.QUOTA_EXCEEDED) {
            message=getString(R.string.failed_upload_quota_exceeded_text);
            if (db.updateFileState(upload.getOriginalStoragePath(),DbHandler.UPLOAD_STATUS_UPLOAD_FAILED,message) == 0) {
              db.putFileForLater(upload.getOriginalStoragePath(),upload.getAccount().name,message);
            }
          }
        }
  finally {
          if (db != null) {
            db.close();
          }
        }
      }
    }
    mNotificationManager.notify(R.string.uploader_upload_failed_ticker,errorBuilder.build());
  }
}
