{
  Log_OC.d(TAG,"Starting command with id " + startId);
  boolean retry=intent.getBooleanExtra(KEY_RETRY,false);
  AbstractList<String> requestedUploads=new Vector<String>();
  if (!intent.hasExtra(KEY_ACCOUNT)) {
    Log_OC.e(TAG,"Not enough information provided in intent");
    return Service.START_NOT_STICKY;
  }
  Account account=intent.getParcelableExtra(KEY_ACCOUNT);
  if (!AccountUtils.exists(account,getApplicationContext())) {
    return Service.START_NOT_STICKY;
  }
  OwnCloudVersion ocv=AccountUtils.getServerVersion(account);
  boolean chunked=ocv.isChunkedUploadSupported();
  if (!retry) {
    if (!(intent.hasExtra(KEY_LOCAL_FILE) || intent.hasExtra(KEY_FILE))) {
      Log_OC.e(TAG,"Not enough information provided in intent");
      return Service.START_NOT_STICKY;
    }
    String[] localPaths=null, remotePaths=null, mimeTypes=null;
    OCFile[] files=null;
    if (intent.hasExtra(KEY_FILE)) {
      Parcelable[] files_temp=intent.getParcelableArrayExtra(KEY_FILE);
      files=new OCFile[files_temp.length];
      System.arraycopy(files_temp,0,files,0,files_temp.length);
    }
 else {
      localPaths=intent.getStringArrayExtra(KEY_LOCAL_FILE);
      remotePaths=intent.getStringArrayExtra(KEY_REMOTE_FILE);
      mimeTypes=intent.getStringArrayExtra(KEY_MIME_TYPE);
    }
    boolean forceOverwrite=intent.getBooleanExtra(KEY_FORCE_OVERWRITE,false);
    int localAction=intent.getIntExtra(KEY_LOCAL_BEHAVIOUR,LOCAL_BEHAVIOUR_FORGET);
    boolean isCreateRemoteFolder=intent.getBooleanExtra(KEY_CREATE_REMOTE_FOLDER,false);
    int createdBy=intent.getIntExtra(KEY_CREATED_BY,UploadFileOperation.CREATED_BY_USER);
    if (intent.hasExtra(KEY_FILE) && files == null) {
      Log_OC.e(TAG,"Incorrect array for OCFiles provided in upload intent");
      return Service.START_NOT_STICKY;
    }
 else     if (!intent.hasExtra(KEY_FILE)) {
      if (localPaths == null) {
        Log_OC.e(TAG,"Incorrect array for local paths provided in upload intent");
        return Service.START_NOT_STICKY;
      }
      if (remotePaths == null) {
        Log_OC.e(TAG,"Incorrect array for remote paths provided in upload intent");
        return Service.START_NOT_STICKY;
      }
      if (localPaths.length != remotePaths.length) {
        Log_OC.e(TAG,"Different number of remote paths and local paths!");
        return Service.START_NOT_STICKY;
      }
      files=new OCFile[localPaths.length];
      for (int i=0; i < localPaths.length; i++) {
        files[i]=UploadFileOperation.obtainNewOCFileToUpload(remotePaths[i],localPaths[i],((mimeTypes != null) ? mimeTypes[i] : null));
        if (files[i] == null) {
          Log_OC.e(TAG,"obtainNewOCFileToUpload() returned null for remotePaths[i]:" + remotePaths[i] + " and localPaths[i]:"+ localPaths[i]);
          return Service.START_NOT_STICKY;
        }
      }
    }
    String uploadKey=null;
    UploadFileOperation newUpload=null;
    try {
      for (int i=0; i < files.length; i++) {
        newUpload=new UploadFileOperation(account,files[i],chunked,forceOverwrite,localAction,this);
        newUpload.setCreatedBy(createdBy);
        if (isCreateRemoteFolder) {
          newUpload.setRemoteFolderToBeCreated();
        }
        newUpload.addDatatransferProgressListener(this);
        newUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);
        OCUpload ocUpload=new OCUpload(files[i],account);
        ocUpload.setFileSize(files[i].getFileLength());
        ocUpload.setForceOverwrite(forceOverwrite);
        ocUpload.setCreateRemoteFolder(isCreateRemoteFolder);
        ocUpload.setCreatedBy(createdBy);
        ocUpload.setLocalAction(localAction);
        ocUpload.setUploadStatus(UploadStatus.UPLOAD_IN_PROGRESS);
        long id=mUploadsStorageManager.storeUpload(ocUpload);
        newUpload.setOCUploadId(id);
        Pair<String,String> putResult=mPendingUploads.putIfAbsent(account.name,files[i].getRemotePath(),newUpload);
        if (putResult != null) {
          uploadKey=putResult.first;
          requestedUploads.add(uploadKey);
        }
 else {
          mUploadsStorageManager.removeUpload(account.name,files[i].getRemotePath());
        }
      }
    }
 catch (    IllegalArgumentException e) {
      Log_OC.e(TAG,"Not enough information provided in intent: " + e.getMessage());
      return START_NOT_STICKY;
    }
catch (    IllegalStateException e) {
      Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());
      return START_NOT_STICKY;
    }
catch (    Exception e) {
      Log_OC.e(TAG,"Unexpected exception while processing upload intent",e);
      return START_NOT_STICKY;
    }
  }
 else {
    if (!intent.hasExtra(KEY_ACCOUNT) || !intent.hasExtra(KEY_RETRY_UPLOAD)) {
      Log_OC.e(TAG,"Not enough information provided in intent: no KEY_RETRY_UPLOAD_KEY");
      return START_NOT_STICKY;
    }
    OCUpload upload=intent.getParcelableExtra(KEY_RETRY_UPLOAD);
    UploadFileOperation newUpload=new UploadFileOperation(account,upload,chunked,upload.isForceOverwrite(),upload.getLocalAction(),this);
    newUpload.addDatatransferProgressListener(this);
    newUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);
    Pair<String,String> putResult=mPendingUploads.putIfAbsent(account.name,upload.getRemotePath(),newUpload);
    if (putResult != null) {
      String uploadKey=putResult.first;
      requestedUploads.add(uploadKey);
      upload.setUploadStatus(UploadStatus.UPLOAD_IN_PROGRESS);
      mUploadsStorageManager.updateUpload(upload);
    }
  }
  if (requestedUploads.size() > 0) {
    Message msg=mServiceHandler.obtainMessage();
    msg.arg1=startId;
    msg.obj=requestedUploads;
    mServiceHandler.sendMessage(msg);
  }
  return Service.START_NOT_STICKY;
}
