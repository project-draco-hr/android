{
  if (!intent.hasExtra(KEY_ACCOUNT) || !intent.hasExtra(KEY_UPLOAD_TYPE)) {
    Log.e(TAG,"Not enough information provided in intent");
    return Service.START_NOT_STICKY;
  }
  int uploadType=intent.getIntExtra(KEY_UPLOAD_TYPE,-1);
  if (uploadType == -1) {
    Log.e(TAG,"Incorrect upload type provided");
    return Service.START_NOT_STICKY;
  }
  Account account=intent.getParcelableExtra(KEY_ACCOUNT);
  String[] localPaths, remotePaths, mimeTypes;
  if (uploadType == UPLOAD_SINGLE_FILE) {
    localPaths=new String[]{intent.getStringExtra(KEY_LOCAL_FILE)};
    remotePaths=new String[]{intent.getStringExtra(KEY_REMOTE_FILE)};
    mimeTypes=new String[]{intent.getStringExtra(KEY_MIME_TYPE)};
  }
 else {
    localPaths=intent.getStringArrayExtra(KEY_LOCAL_FILE);
    remotePaths=intent.getStringArrayExtra(KEY_REMOTE_FILE);
    mimeTypes=intent.getStringArrayExtra(KEY_MIME_TYPE);
  }
  if (localPaths == null) {
    Log.e(TAG,"Incorrect array for local paths provided in upload intent");
    return Service.START_NOT_STICKY;
  }
  if (remotePaths == null) {
    Log.e(TAG,"Incorrect array for remote paths provided in upload intent");
    return Service.START_NOT_STICKY;
  }
  if (localPaths.length != remotePaths.length) {
    Log.e(TAG,"Different number of remote paths and local paths!");
    return Service.START_NOT_STICKY;
  }
  boolean isInstant=intent.getBooleanExtra(KEY_INSTANT_UPLOAD,false);
  boolean forceOverwrite=intent.getBooleanExtra(KEY_FORCE_OVERWRITE,false);
  OwnCloudVersion ocv=new OwnCloudVersion(AccountManager.get(this).getUserData(account,AccountAuthenticator.KEY_OC_VERSION));
  boolean chunked=FileUploader.chunkedUploadIsSupported(ocv);
  AbstractList<String> requestedUploads=new Vector<String>();
  String uploadKey=null;
  UploadFileOperation newUpload=null;
  OCFile file=null;
  FileDataStorageManager storageManager=new FileDataStorageManager(account,getContentResolver());
  boolean fixed=false;
  if (isInstant) {
    fixed=checkAndFixInstantUploadDirectory(storageManager);
  }
  try {
    for (int i=0; i < localPaths.length; i++) {
      uploadKey=buildRemoteName(account,remotePaths[i]);
      file=obtainNewOCFileToUpload(remotePaths[i],localPaths[i],((mimeTypes != null) ? mimeTypes[i] : (String)null),isInstant,forceOverwrite,storageManager);
      if (chunked) {
        newUpload=new ChunkedUploadFileOperation(account,file,isInstant,forceOverwrite);
      }
 else {
        newUpload=new UploadFileOperation(account,file,isInstant,forceOverwrite);
      }
      if (fixed && i == 0) {
        newUpload.setRemoteFolderToBeCreated();
      }
      mPendingUploads.putIfAbsent(uploadKey,newUpload);
      newUpload.addDatatransferProgressListener(this);
      requestedUploads.add(uploadKey);
    }
  }
 catch (  IllegalArgumentException e) {
    Log.e(TAG,"Not enough information provided in intent: " + e.getMessage());
    return START_NOT_STICKY;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,"Bad information provided in intent: " + e.getMessage());
    return START_NOT_STICKY;
  }
catch (  Exception e) {
    Log.e(TAG,"Unexpected exception while processing upload intent",e);
    return START_NOT_STICKY;
  }
  if (requestedUploads.size() > 0) {
    Message msg=mServiceHandler.obtainMessage();
    msg.arg1=startId;
    msg.obj=requestedUploads;
    mServiceHandler.sendMessage(msg);
  }
  return Service.START_NOT_STICKY;
}
