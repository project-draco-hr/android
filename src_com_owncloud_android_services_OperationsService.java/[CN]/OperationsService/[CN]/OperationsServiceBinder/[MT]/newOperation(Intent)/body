{
  RemoteOperation operation=null;
  Target target=null;
  try {
    if (!operationIntent.hasExtra(EXTRA_ACCOUNT) && !operationIntent.hasExtra(EXTRA_SERVER_URL)) {
      Log_OC.e(TAG,"Not enough information provided in intent");
    }
 else {
      Account account=operationIntent.getParcelableExtra(EXTRA_ACCOUNT);
      String serverUrl=operationIntent.getStringExtra(EXTRA_SERVER_URL);
      String webDavPath=operationIntent.getStringExtra(EXTRA_WEBDAV_PATH);
      String webDavUrl=serverUrl + webDavPath;
      String username=operationIntent.getStringExtra(EXTRA_USERNAME);
      String password=operationIntent.getStringExtra(EXTRA_PASSWORD);
      String authToken=operationIntent.getStringExtra(EXTRA_AUTH_TOKEN);
      boolean followRedirects=operationIntent.getBooleanExtra(EXTRA_FOLLOW_REDIRECTS,true);
      String cookie=operationIntent.getStringExtra(EXTRA_COOKIE);
      target=new Target(account,(serverUrl == null) ? null : Uri.parse(serverUrl),((webDavPath == null) || (serverUrl == null)) ? null : webDavUrl,username,password,authToken,followRedirects,cookie);
      String action=operationIntent.getAction();
      if (action.equals(ACTION_CREATE_SHARE)) {
        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);
        Intent sendIntent=operationIntent.getParcelableExtra(EXTRA_SEND_INTENT);
        if (remotePath.length() > 0) {
          operation=new CreateShareOperation(remotePath,ShareType.PUBLIC_LINK,"",false,"",1,sendIntent);
        }
      }
 else       if (action.equals(ACTION_UNSHARE)) {
        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);
        if (remotePath.length() > 0) {
          operation=new UnshareLinkOperation(remotePath,OperationsService.this);
        }
      }
 else       if (action.equals(ACTION_GET_SERVER_INFO)) {
        String authTokenType=operationIntent.getStringExtra(EXTRA_AUTH_TOKEN_TYPE);
        operation=new GetServerInfoOperation(serverUrl,authTokenType,OperationsService.this);
      }
 else       if (action.equals(ACTION_OAUTH2_GET_ACCESS_TOKEN)) {
        String oauth2QueryParameters=operationIntent.getStringExtra(EXTRA_OAUTH2_QUERY_PARAMETERS);
        operation=new OAuth2GetAccessToken(getString(R.string.oauth2_client_id),getString(R.string.oauth2_redirect_uri),getString(R.string.oauth2_grant_type),oauth2QueryParameters);
      }
 else       if (action.equals(ACTION_EXISTENCE_CHECK)) {
        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);
        boolean successIfAbsent=operationIntent.getBooleanExtra(EXTRA_SUCCESS_IF_ABSENT,true);
        operation=new ExistenceCheckRemoteOperation(remotePath,OperationsService.this,successIfAbsent);
      }
 else       if (action.equals(ACTION_GET_USER_NAME)) {
        operation=new GetRemoteUserNameOperation();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());
    operation=null;
  }
  if (operation != null) {
    mPendingOperations.add(new Pair<Target,RemoteOperation>(target,operation));
    startService(new Intent(OperationsService.this,OperationsService.class));
    Log_OC.wtf(TAG,"New operation added, opId: " + operation.hashCode());
    return operation.hashCode();
  }
 else {
    Log_OC.wtf(TAG,"New operation failed, returned Long.MAX_VALUE");
    return Long.MAX_VALUE;
  }
}
