{
  try {
    CertificateCombinedException failInHandshake=null;
    try {
      SSLSocket sock=(SSLSocket)socket;
      sock.startHandshake();
    }
 catch (    RuntimeException e) {
      if (e instanceof CertificateCombinedException) {
        failInHandshake=(CertificateCombinedException)e;
      }
 else {
        Throwable cause=e.getCause();
        Throwable previousCause=null;
        while (cause != null && cause != previousCause && !(cause instanceof CertificateCombinedException)) {
          previousCause=cause;
          cause=cause.getCause();
        }
        if (cause != null && cause instanceof CertificateCombinedException) {
          failInHandshake=(CertificateCombinedException)cause;
        }
      }
      if (failInHandshake == null) {
        throw e;
      }
      failInHandshake.setHostInUrl(host);
    }
    SSLSession newSession=null;
    boolean verifiedHostname=true;
    if (mHostnameVerifier != null) {
      if (failInHandshake != null) {
        X509Certificate serverCert=failInHandshake.getServerCertificate();
        try {
          mHostnameVerifier.verify(host,serverCert);
        }
 catch (        SSLException e) {
          verifiedHostname=false;
        }
      }
 else {
        newSession=((SSLSocket)socket).getSession();
        if (!mTrustManager.isKnownServer((X509Certificate)(newSession.getPeerCertificates()[0]))) {
          verifiedHostname=mHostnameVerifier.verify(host,newSession);
        }
      }
    }
    if (!verifiedHostname) {
      SSLPeerUnverifiedException pue=new SSLPeerUnverifiedException("Names in the server certificate do not match to " + host + " in the URL");
      if (failInHandshake == null) {
        failInHandshake=new CertificateCombinedException((X509Certificate)newSession.getPeerCertificates()[0]);
        failInHandshake.setHostInUrl(host);
      }
      failInHandshake.setSslPeerUnverifiedException(pue);
      pue.initCause(failInHandshake);
      throw pue;
    }
 else     if (failInHandshake != null) {
      SSLHandshakeException hse=new SSLHandshakeException("Server certificate could not be verified");
      hse.initCause(failInHandshake);
      throw hse;
    }
  }
 catch (  IOException io) {
    try {
      socket.close();
    }
 catch (    Exception x) {
    }
    throw io;
  }
}
