{
  super.onListItemClick(l,v,position,id);
  PathLayout pl=(PathLayout)findViewById(R.id.pathLayout1);
  if (!mCursor.moveToPosition(position)) {
    throw new IndexOutOfBoundsException("Incorrect item selected");
  }
  if (!mIsDisplayingFile) {
    if (mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_CONTENT_TYPE)).equals("DIR")) {
      String id_=mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta._ID));
      String dirname=mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_NAME));
      pl.push(DisplayUtils.HtmlDecode(dirname));
      mPath.addLast(DisplayUtils.HtmlDecode(dirname));
      mParents.push(id_);
      mCursor=managedQuery(Uri.withAppendedPath(ProviderTableMeta.CONTENT_URI_DIR,id_),null,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=?",new String[]{mAccount.name},null);
      setListAdapter(new FileListListAdapter(mCursor,this));
    }
 else {
      mIsDisplayingFile=true;
      setContentView(R.layout.file_display);
      String id_=mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta._ID));
      mCursor=managedQuery(Uri.withAppendedPath(ProviderTableMeta.CONTENT_URI_FILE,id_),null,null,null,null);
      mCursor.moveToFirst();
      TextView tv=(TextView)findViewById(R.id.textView1);
      tv.setText(mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_NAME)));
      tv=(TextView)findViewById(R.id.textView2);
      tv.setText(DisplayUtils.convertMIMEtoPrettyPrint(mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_CONTENT_TYPE))));
      tv=(TextView)findViewById(R.id.textView3);
      tv.setText(DisplayUtils.bitsToHumanReadable(mCursor.getLong(mCursor.getColumnIndex(ProviderTableMeta.FILE_CONTENT_LENGTH))));
      tv=(TextView)findViewById(R.id.textView4);
      tv.setText(mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_MODIFIED)));
      if (!TextUtils.isEmpty(mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH))) && mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_CONTENT_TYPE)).matches("image/*")) {
        ImageView iv=(ImageView)findViewById(R.id.imageView1);
        Bitmap bmp=BitmapFactory.decodeFile(mCursor.getString(mCursor.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH)));
        Matrix m=new Matrix();
        float scale;
        if (bmp.getWidth() > bmp.getHeight()) {
          scale=(float)(200. / bmp.getWidth());
        }
 else {
          scale=(float)(200. / bmp.getHeight());
        }
        m.postScale(scale,scale);
        Bitmap newBmp=Bitmap.createBitmap(bmp,0,0,bmp.getWidth(),bmp.getHeight(),m,true);
        iv.setImageBitmap(newBmp);
      }
      setListAdapter(new FileListActionListAdapter(mCursor,this,mAccount));
    }
    getListView().invalidate();
  }
 else {
    try {
      Intent i=(Intent)getListAdapter().getItem(position);
      if (i.hasExtra("toDownload")) {
        Uri data=Uri.parse(Environment.getExternalStorageDirectory().getAbsolutePath() + "/owncloud/filename");
        Log.d("DUPA",data.toString());
        File f=new File(data.toString());
        FileInputStream fis=new FileInputStream(f);
        byte buffer[]=new byte[512];
        fis.read(buffer);
        Log.d("DUPA",new String(buffer));
      }
    }
 catch (    ClassCastException e) {
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
