{
  View view=inflater.inflate(R.layout.share_file_layout,container,false);
  ImageView icon=(ImageView)view.findViewById(R.id.shareFileIcon);
  icon.setImageResource(MimetypeIconUtil.getFileTypeIconId(mFile.getMimetype(),mFile.getFileName()));
  if (mFile.isImage()) {
    String remoteId=String.valueOf(mFile.getRemoteId());
    Bitmap thumbnail=ThumbnailsCacheManager.getBitmapFromDiskCache(remoteId);
    if (thumbnail != null) {
      icon.setImageBitmap(thumbnail);
    }
  }
  TextView filename=(TextView)view.findViewById(R.id.shareFileName);
  filename.setText(mFile.getFileName());
  TextView size=(TextView)view.findViewById(R.id.shareFileSize);
  if (mFile.isFolder()) {
    size.setVisibility(View.GONE);
  }
 else {
    size.setText(DisplayUtils.bytesToHumanReadable(mFile.getFileLength()));
  }
  Button addUserGroupButton=(Button)view.findViewById(R.id.addUserButton);
  addUserGroupButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      boolean shareWithUsersEnable=AccountUtils.hasSearchUsersSupport(mAccount);
      if (shareWithUsersEnable) {
        mListener.showSearchUsersAndGroups();
      }
 else {
        String message=getString(R.string.share_sharee_unavailable);
        Toast.makeText(getActivity(),message,Toast.LENGTH_LONG).show();
      }
    }
  }
);
  mOnShareViaLinkSwitchCheckedChangeListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      if (!isResumed()) {
        return;
      }
      if (isChecked) {
        ((FileActivity)getActivity()).getFileOperationsHelper().shareFileViaLink(mFile);
      }
 else {
        ((FileActivity)getActivity()).getFileOperationsHelper().unshareFileViaLink(mFile);
      }
    }
  }
;
  Switch shareViaLinkSwitch=(Switch)view.findViewById(R.id.shareViaLinkSectionSwitch);
  shareViaLinkSwitch.setOnCheckedChangeListener(mOnShareViaLinkSwitchCheckedChangeListener);
  mOnExpirationDateSwitchCheckedChangeListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      if (!isResumed()) {
        return;
      }
      if (isChecked) {
        ExpirationDatePickerDialogFragment dialog=ExpirationDatePickerDialogFragment.newInstance(mFile);
        dialog.show(getActivity().getSupportFragmentManager(),ExpirationDatePickerDialogFragment.DATE_PICKER_DIALOG);
      }
 else {
        ((FileActivity)getActivity()).getFileOperationsHelper().setExpirationDateToShareViaLink(mFile,-1,-1,-1);
      }
      buttonView.setOnCheckedChangeListener(null);
      buttonView.toggle();
      buttonView.setOnCheckedChangeListener(mOnExpirationDateSwitchCheckedChangeListener);
    }
  }
;
  Switch shareViaLinkExpirationSwitch=(Switch)view.findViewById(R.id.shareViaLinkExpirationSwitch);
  shareViaLinkExpirationSwitch.setOnCheckedChangeListener(mOnExpirationDateSwitchCheckedChangeListener);
  initPasswordListener(view);
  return view;
}
