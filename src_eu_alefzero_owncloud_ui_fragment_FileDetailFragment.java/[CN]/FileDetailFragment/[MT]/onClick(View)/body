{
switch (v.getId()) {
case R.id.fdDownloadBtn:
{
      Intent i=new Intent(getActivity(),FileDownloader.class);
      i.putExtra(FileDownloader.EXTRA_ACCOUNT,mAccount);
      i.putExtra(FileDownloader.EXTRA_REMOTE_PATH,mFile.getRemotePath());
      i.putExtra(FileDownloader.EXTRA_FILE_PATH,mFile.getRemotePath());
      i.putExtra(FileDownloader.EXTRA_FILE_SIZE,mFile.getFileLength());
      Toast.makeText(getActivity(),"Downloading",Toast.LENGTH_LONG).show();
      setButtonsForDownloading();
      getActivity().startService(i);
      break;
    }
case R.id.fdKeepInSync:
{
    CheckBox cb=(CheckBox)getView().findViewById(R.id.fdKeepInSync);
    mFile.setKeepInSync(cb.isChecked());
    FileDataStorageManager fdsm=new FileDataStorageManager(mAccount,getActivity().getApplicationContext().getContentResolver());
    fdsm.saveFile(mFile);
    if (mFile.keepInSync()) {
      onClick(getView().findViewById(R.id.fdDownloadBtn));
    }
    break;
  }
case R.id.fdRenameBtn:
{
  EditNameFragment dialog=EditNameFragment.newInstance(mFile.getFileName());
  dialog.show(getFragmentManager(),"nameeditdialog");
  dialog.setOnDismissListener(this);
  break;
}
case R.id.fdRemoveBtn:
{
ConfirmationDialogFragment confDialog=ConfirmationDialogFragment.newInstance(R.string.confirmation_remove_alert,new String[]{mFile.getFileName()});
confDialog.setOnConfirmationListener(this);
confDialog.show(getFragmentManager(),FTAG_CONFIRMATION);
break;
}
case R.id.fdOpenBtn:
{
String storagePath=mFile.getStoragePath();
String encodedStoragePath=WebdavUtils.encodePath(storagePath);
try {
Intent i=new Intent(Intent.ACTION_VIEW);
i.setDataAndType(Uri.parse("file://" + encodedStoragePath),mFile.getMimetype());
i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
startActivity(i);
}
 catch (Throwable t) {
Log.e(TAG,"Fail when trying to open with the mimeType provided from the ownCloud server: " + mFile.getMimetype());
boolean toastIt=true;
String mimeType="";
try {
  Intent i=new Intent(Intent.ACTION_VIEW);
  mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(storagePath.substring(storagePath.lastIndexOf('.') + 1));
  if (mimeType != null && !mimeType.equals(mFile.getMimetype())) {
    i.setDataAndType(Uri.parse("file://" + encodedStoragePath),mimeType);
    i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    startActivity(i);
    toastIt=false;
  }
}
 catch (IndexOutOfBoundsException e) {
  Log.e(TAG,"Trying to find out MIME type of a file without extension: " + storagePath);
}
catch (ActivityNotFoundException e) {
  Log.e(TAG,"No activity found to handle: " + storagePath + " with MIME type "+ mimeType+ " obtained from extension");
}
catch (Throwable th) {
  Log.e(TAG,"Unexpected problem when opening: " + storagePath,th);
}
 finally {
  if (toastIt) {
    Toast.makeText(getActivity(),"There is no application to handle file " + mFile.getFileName(),Toast.LENGTH_SHORT).show();
  }
}
}
break;
}
default :
Log.e(TAG,"Incorrect view clicked!");
}
}
