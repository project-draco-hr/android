{
  Bitmap result=null;
  if (params.length != 1)   return result;
  String storagePath=params[0];
  try {
    BitmapFactory.Options options=new Options();
    options.inScaled=true;
    options.inPurgeable=true;
    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1) {
      options.inPreferQualityOverSpeed=false;
    }
    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
      options.inMutable=false;
    }
    result=BitmapFactory.decodeFile(storagePath,options);
    if (result != null) {
      int width=options.outWidth;
      int height=options.outHeight;
      int scale=1;
      boolean recycle=false;
      if (width >= 2048 || height >= 2048) {
        scale=(int)(Math.ceil(Math.max(height,width) / 2048.));
        options.inSampleSize=scale;
        recycle=true;
      }
      Display display=getActivity().getWindowManager().getDefaultDisplay();
      Point size=new Point();
      int screenwidth;
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR2) {
        display.getSize(size);
        screenwidth=size.x;
      }
 else {
        screenwidth=display.getWidth();
      }
      Log.e("ASD","W " + width + " SW "+ screenwidth);
      if (width > screenwidth) {
        scale=(int)(Math.ceil(Math.max(height,width) / screenwidth));
        options.inSampleSize=scale;
        recycle=true;
      }
      if (recycle)       result.recycle();
      result=BitmapFactory.decodeFile(storagePath,options);
    }
  }
 catch (  OutOfMemoryError e) {
    result=null;
    Log.e(TAG,"Out of memory occured for file with size " + storagePath);
  }
catch (  NoSuchFieldError e) {
    result=null;
    Log.e(TAG,"Error from access to unexisting field despite protection " + storagePath);
  }
catch (  Throwable t) {
    result=null;
    Log.e(TAG,"Unexpected error while creating image preview " + storagePath,t);
  }
  return result;
}
