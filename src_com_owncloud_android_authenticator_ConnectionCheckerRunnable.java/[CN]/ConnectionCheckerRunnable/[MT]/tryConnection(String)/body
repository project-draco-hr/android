{
  boolean retval=false;
  GetMethod get=null;
  try {
    WebdavClient wc=OwnCloudClientUtils.createOwnCloudClient(Uri.parse(urlSt),mContext);
    get=new GetMethod(urlSt);
    int status=wc.executeMethod(get,TRY_CONNECTION_TIMEOUT,TRY_CONNECTION_TIMEOUT);
    String response=get.getResponseBodyAsString();
switch (status) {
case HttpStatus.SC_OK:
{
        JSONObject json=new JSONObject(response);
        if (!json.getBoolean("installed")) {
          mLatestResult=ResultType.INSTANCE_NOT_CONFIGURED;
          break;
        }
        mOCVersion=new OwnCloudVersion(json.getString("version"));
        if (!mOCVersion.isVersionValid()) {
          mLatestResult=ResultType.BAD_OC_VERSION;
          break;
        }
        retval=true;
        break;
      }
case HttpStatus.SC_NOT_FOUND:
    mLatestResult=ResultType.FILE_NOT_FOUND;
  break;
case HttpStatus.SC_INTERNAL_SERVER_ERROR:
mLatestResult=ResultType.INSTANCE_NOT_CONFIGURED;
break;
default :
mLatestResult=ResultType.UNKNOWN_ERROR;
Log.e(TAG,"Not handled status received from server: " + status);
}
}
 catch (JSONException e) {
mLatestResult=ResultType.INSTANCE_NOT_CONFIGURED;
Log.e(TAG,"JSON exception while trying connection (instance not configured) ",e);
}
catch (SocketException e) {
mLatestResult=ResultType.WRONG_CONNECTION;
Log.e(TAG,"Socket exception while trying connection",e);
}
catch (SocketTimeoutException e) {
mLatestResult=ResultType.TIMEOUT;
Log.e(TAG,"Socket timeout exception while trying connection",e);
}
catch (MalformedURLException e) {
mLatestResult=ResultType.INCORRECT_ADDRESS;
Log.e(TAG,"Connect exception while trying connection",e);
}
catch (UnknownHostException e) {
mLatestResult=ResultType.HOST_NOT_AVAILABLE;
Log.e(TAG,"Unknown host exception while trying connection",e);
}
catch (SSLPeerUnverifiedException e) {
mLatestResult=ResultType.SSL_UNVERIFIED_SERVER;
Log.e(TAG,"SSL Peer Unverified exception while trying connection",e);
}
catch (SSLException e) {
mLatestResult=ResultType.SSL_INIT_ERROR;
Log.e(TAG,"SSL exception while trying connection",e);
}
catch (ConnectTimeoutException e) {
mLatestResult=ResultType.TIMEOUT;
Log.e(TAG,"Socket timeout exception while trying connection",e);
}
catch (HttpException e) {
mLatestResult=ResultType.UNKNOWN_ERROR;
Log.e(TAG,"HTTP exception while trying connection",e);
}
catch (IOException e) {
mLatestResult=ResultType.UNKNOWN_ERROR;
Log.e(TAG,"I/O exception while trying connection",e);
}
catch (Exception e) {
mLatestResult=ResultType.UNKNOWN_ERROR;
Log.e(TAG,"Unexpected exception while trying connection",e);
}
 finally {
if (get != null) get.releaseConnection();
}
return retval;
}
