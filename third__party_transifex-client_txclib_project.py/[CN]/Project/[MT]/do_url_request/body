def do_url_request(self, api_call, multipart=False, data=None, files=[], encoding=None, method='GET', **kwargs):
    '\n        Issues a url request.\n        '
    host = self.url_info['host']
    try:
        username = self.txrc.get(host, 'username')
        passwd = self.txrc.get(host, 'password')
        token = self.txrc.get(host, 'token')
        hostname = self.txrc.get(host, 'hostname')
    except ConfigParser.NoSectionError:
        raise Exception(('No user credentials found for host %s. Edit ~/.transifexrc and add the appropriate info in there.' % host))
    kwargs['hostname'] = hostname
    kwargs.update(self.url_info)
    url = (API_URLS[api_call] % kwargs).encode('UTF-8')
    logger.debug(url)
    opener = None
    headers = None
    req = None
    if multipart:
        opener = urllib2.build_opener(MultipartPostHandler)
        for (info, filename) in files:
            data = {'resource': info.split(';')[0], 'language': info.split(';')[1], 'uploaded_file': open(filename, 'rb'), }
        urllib2.install_opener(opener)
        req = RequestWithMethod(url=url, data=data, method=method)
    else:
        req = RequestWithMethod(url=url, data=data, method=method)
        if encoding:
            req.add_header('Content-Type', encoding)
    base64string = base64.encodestring(('%s:%s' % (username, passwd)))[:(-1)]
    authheader = ('Basic %s' % base64string)
    req.add_header('Authorization', authheader)
    req.add_header('Accept-Encoding', 'gzip,deflate')
    req.add_header('User-Agent', user_agent_identifier())
    try:
        response = urllib2.urlopen(req, timeout=300)
        return http_response(response)
    except urllib2.HTTPError as e:
        if (e.code in [401, 403, 404]):
            raise e
        elif (200 <= e.code < 300):
            return None
        else:
            raise Exception(('Remote server replied: %s' % e.read()))
    except urllib2.URLError as e:
        error = e.args[0]
        raise Exception(('Remote server replied: %s' % error[1]))
