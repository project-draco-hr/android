def _should_download(self, lang, stats, local_file=None, force=False, mode=None):
    'Return whether a translation should be downloaded.\n\n        If local_file is None, skip the timestamps check (the file does\n        not exist locally).\n        '
    try:
        lang_stats = stats[lang]
    except KeyError as e:
        logger.debug(('No lang %s in statistics' % lang))
        return False
    satisfies_min = self._satisfies_min_translated(lang_stats, mode)
    if (not satisfies_min):
        return False
    if force:
        logger.debug('Downloading translation due to -f')
        return True
    if (local_file is not None):
        remote_update = self._extract_updated(lang_stats)
        if (not self._remote_is_newer(remote_update, local_file)):
            logger.debug(('Local is newer than remote for lang %s' % lang))
            return False
    return True
