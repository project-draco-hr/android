def push(self, source=False, translations=False, force=False, resources=[], languages=[], skip=False, no_interactive=False):
    '\n        Push all the resources\n        '
    resource_list = self.get_chosen_resources(resources)
    self.skip = skip
    self.force = force
    for resource in resource_list:
        push_languages = []
        (project_slug, resource_slug) = resource.split('.')
        files = self.get_resource_files(resource)
        slang = self.get_resource_option(resource, 'source_lang')
        sfile = self.get_resource_option(resource, 'source_file')
        lang_map = self.get_resource_lang_mapping(resource)
        host = self.get_resource_host(resource)
        logger.debug(('Language mapping is: %s' % lang_map))
        logger.debug(('Using host %s' % host))
        self.url_info = {'host': host, 'project': project_slug, 'resource': resource_slug, }
        logger.info(('Pushing translations for resource %s:' % resource))
        stats = self._get_stats_for_resource()
        if (force and (not no_interactive)):
            answer = raw_input('Warning: By using --force, the uploaded files will overwrite remote translations, even if they are newer than your uploaded files.\nAre you sure you want to continue? [y/N] ')
            if (not (answer in ['', 'Y', 'y', 'yes', 'YES'])):
                return
        if source:
            if (sfile == None):
                logger.error(("You don't seem to have a proper source file mapping for resource %s. Try without the --source option or set a source file first and then try again." % resource))
                continue
            try:
                logger.warning(('Pushing source file (%s)' % sfile))
                if (not self._resource_exists(stats)):
                    logger.info('Resource does not exist.  Creating...')
                    fileinfo = ('%s;%s' % (resource_slug, slang))
                    filename = self.get_full_path(sfile)
                    self._create_resource(resource, project_slug, fileinfo, filename)
                self.do_url_request('push_source', multipart=True, method='PUT', files=[(('%s;%s' % (resource_slug, slang)), self.get_full_path(sfile))])
            except Exception as e:
                if (not skip):
                    raise
                else:
                    logger.error(e)
        else:
            try:
                self.do_url_request('resource_details')
            except Exception as e:
                code = getattr(e, 'code', None)
                if (code == 404):
                    msg = "Resource %s doesn't exist on the server."
                    logger.error((msg % resource))
                    continue
        if translations:
            if (not languages):
                push_languages = files.keys()
            else:
                push_languages = []
                f_langs = files.keys()
                for l in languages:
                    if (l in lang_map.keys()):
                        l = lang_map[l]
                    push_languages.append(l)
                    if (l not in f_langs):
                        msg = "Warning: No mapping found for language code '%s'."
                        logger.error((msg % color_text(l, 'RED')))
            logger.debug(('Languages to push are %s' % push_languages))
            for lang in push_languages:
                local_lang = lang
                if (lang in lang_map.values()):
                    remote_lang = lang_map.flip[lang]
                else:
                    remote_lang = lang
                local_file = files[local_lang]
                kwargs = {'lang': remote_lang, 'stats': stats, 'local_file': local_file, 'force': force, }
                if (not self._should_push_translation(**kwargs)):
                    msg = "Skipping '%s' translation (file: %s)."
                    logger.info((msg % (color_text(lang, 'RED'), local_file)))
                    continue
                msg = "Pushing '%s' translations (file: %s)"
                logger.warning((msg % (color_text(remote_lang, 'RED'), local_file)))
                try:
                    self.do_url_request('push_translation', multipart=True, method='PUT', files=[(('%s;%s' % (resource_slug, remote_lang)), self.get_full_path(local_file))], language=remote_lang)
                    logger.debug(('Translation %s pushed.' % remote_lang))
                except Exception as e:
                    if (not skip):
                        raise e
                    else:
                        logger.error(e)
