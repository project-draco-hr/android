{
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.account_setup);
  mHostUrlInput=(EditText)findViewById(R.id.hostUrlInput);
  mUsernameInput=(EditText)findViewById(R.id.account_username);
  mPasswordInput=(EditText)findViewById(R.id.account_password);
  mOAuthAuthEndpointText=(TextView)findViewById(R.id.oAuthEntryPoint_1);
  mOAuthTokenEndpointText=(TextView)findViewById(R.id.oAuthEntryPoint_2);
  mOAuth2Check=(CheckBox)findViewById(R.id.oauth_onOff_check);
  mOkButton=findViewById(R.id.buttonOK);
  mAuthStatusLayout=(TextView)findViewById(R.id.auth_status_text);
  mHostUrlInputEnabled=getResources().getBoolean(R.bool.show_server_url_input);
  Button b=(Button)findViewById(R.id.account_register);
  if (b != null) {
    b.setText(String.format(getString(R.string.auth_register),getString(R.string.app_name)));
  }
  mAccountMgr=AccountManager.get(this);
  mNewCapturedUriFromOAuth2Redirection=null;
  mAction=getIntent().getByteExtra(EXTRA_ACTION,ACTION_CREATE);
  mAccount=null;
  mHostBaseUrl="";
  boolean refreshButtonEnabled=false;
  if (!mHostUrlInputEnabled) {
    mHostUrlInput.setText(getString(R.string.server_url));
    findViewById(R.id.hostUrlFrame).setVisibility(View.GONE);
    mRefreshButton=findViewById(R.id.centeredRefreshButton);
  }
 else {
    mRefreshButton=findViewById(R.id.embeddedRefreshButton);
  }
  if (savedInstanceState == null) {
    mServerStatusText=mServerStatusIcon=0;
    mServerIsValid=false;
    mServerIsChecked=false;
    mIsSslConn=false;
    mAuthStatusText=mAuthStatusIcon=0;
    String tokenType=getIntent().getExtras().getString(AccountAuthenticator.KEY_AUTH_TOKEN_TYPE);
    boolean oAuthRequired=AccountAuthenticator.AUTH_TOKEN_TYPE_ACCESS_TOKEN.equals(tokenType) || OAUTH_MODE_ON.equals(getString(R.string.oauth2_mode));
    mAccount=getIntent().getExtras().getParcelable(EXTRA_ACCOUNT);
    if (mAccount != null) {
      String ocVersion=mAccountMgr.getUserData(mAccount,AccountAuthenticator.KEY_OC_VERSION);
      if (ocVersion != null) {
        mDiscoveredVersion=new OwnCloudVersion(ocVersion);
      }
      mHostBaseUrl=normalizeUrl(mAccountMgr.getUserData(mAccount,AccountAuthenticator.KEY_OC_BASE_URL));
      mHostUrlInput.setText(mHostBaseUrl);
      String userName=mAccount.name.substring(0,mAccount.name.lastIndexOf('@'));
      mUsernameInput.setText(userName);
      oAuthRequired=(mAccountMgr.getUserData(mAccount,AccountAuthenticator.KEY_SUPPORTS_OAUTH2) != null);
    }
    mOAuth2Check.setChecked(oAuthRequired);
    changeViewByOAuth2Check(oAuthRequired);
    mJustCreated=true;
    if (mAction == ACTION_UPDATE_TOKEN || !mHostUrlInputEnabled) {
      checkOcServer();
    }
  }
 else {
    mServerIsValid=savedInstanceState.getBoolean(KEY_SERVER_VALID);
    mServerIsChecked=savedInstanceState.getBoolean(KEY_SERVER_CHECKED);
    mServerStatusText=savedInstanceState.getInt(KEY_SERVER_STATUS_TEXT);
    mServerStatusIcon=savedInstanceState.getInt(KEY_SERVER_STATUS_ICON);
    mIsSslConn=savedInstanceState.getBoolean(KEY_IS_SSL_CONN);
    mAuthStatusText=savedInstanceState.getInt(KEY_AUTH_STATUS_TEXT);
    mAuthStatusIcon=savedInstanceState.getInt(KEY_AUTH_STATUS_ICON);
    if (savedInstanceState.getBoolean(KEY_PASSWORD_VISIBLE,false)) {
      showPassword();
    }
    String ocVersion=savedInstanceState.getString(KEY_OC_VERSION);
    if (ocVersion != null) {
      mDiscoveredVersion=new OwnCloudVersion(ocVersion);
    }
    mHostBaseUrl=savedInstanceState.getString(KEY_HOST_URL_TEXT);
    mAccount=savedInstanceState.getParcelable(KEY_ACCOUNT);
    if (savedInstanceState.getBoolean(KEY_SERVER_CHECK_IN_PROGRESS,false)) {
      checkOcServer();
    }
    refreshButtonEnabled=savedInstanceState.getBoolean(KEY_REFRESH_BUTTON_ENABLED);
  }
  showServerStatus();
  showAuthStatus();
  if (mAction == ACTION_UPDATE_TOKEN) {
    mHostUrlInput.setEnabled(false);
    mHostUrlInput.setFocusable(false);
    mUsernameInput.setEnabled(false);
    mUsernameInput.setFocusable(false);
    mOAuth2Check.setVisibility(View.GONE);
  }
  if (mServerIsChecked && !mServerIsValid && refreshButtonEnabled)   showRefreshButton();
  mOkButton.setEnabled(mServerIsValid);
  if (!OAUTH_MODE_OPTIONAL.equals(getString(R.string.oauth2_mode))) {
    mOAuth2Check.setVisibility(View.GONE);
  }
  mPasswordInput.setText("");
  mHostUrlInput.setOnFocusChangeListener(this);
  mHostUrlInput.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      if (!mHostBaseUrl.equals(normalizeUrl(mHostUrlInput.getText().toString()))) {
        mOkButton.setEnabled(false);
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  mPasswordInput.setOnFocusChangeListener(this);
  mPasswordInput.setImeOptions(EditorInfo.IME_ACTION_DONE);
  mPasswordInput.setOnEditorActionListener(this);
  mPasswordInput.setOnTouchListener(new RightDrawableOnTouchListener(){
    @Override public boolean onDrawableTouch(    final MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        AuthenticatorActivity.this.onViewPasswordClick();
      }
      return true;
    }
  }
);
}
