{
  boolean isOAuth=AccountTypeUtils.getAuthTokenTypeAccessToken(MainApp.getAccountType()).equals(mAuthTokenType);
  boolean isSaml=AccountTypeUtils.getAuthTokenTypeSamlSessionCookie(MainApp.getAccountType()).equals(mAuthTokenType);
  String lastPermanentLocation=authResult.getLastPermanentLocation();
  if (lastPermanentLocation != null) {
    mServerInfo.mBaseUrl=AccountUtils.trimWebdavSuffix(lastPermanentLocation);
  }
  Uri uri=Uri.parse(mServerInfo.mBaseUrl);
  String username=mUsernameInput.getText().toString().trim();
  if (isOAuth) {
    username="OAuth_user" + (new java.util.Random(System.currentTimeMillis())).nextLong();
  }
  String accountName=com.owncloud.android.lib.common.accounts.AccountUtils.buildAccountName(uri,username);
  Account newAccount=new Account(accountName,MainApp.getAccountType());
  if (AccountUtils.exists(newAccount,getApplicationContext())) {
    RemoteOperationResult result=new RemoteOperationResult(ResultCode.ACCOUNT_NOT_NEW);
    updateAuthStatusIconAndText(result);
    showAuthStatus();
    Log_OC.d(TAG,result.getLogMessage());
    return false;
  }
 else {
    mAccount=newAccount;
    if (isOAuth || isSaml) {
      mAccountMgr.addAccountExplicitly(mAccount,"",null);
    }
 else {
      mAccountMgr.addAccountExplicitly(mAccount,mPasswordInput.getText().toString(),null);
    }
    mAccountMgr.setUserData(mAccount,Constants.KEY_OC_ACCOUNT_VERSION,Integer.toString(AccountUtils.ACCOUNT_VERSION));
    Account defaultAccount=AccountUtils.getCurrentOwnCloudAccount(this);
    if (defaultAccount == null) {
      SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(this).edit();
      editor.putString("select_oc_account",accountName);
      editor.commit();
    }
    final Intent intent=new Intent();
    intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,MainApp.getAccountType());
    intent.putExtra(AccountManager.KEY_ACCOUNT_NAME,mAccount.name);
    intent.putExtra(AccountManager.KEY_USERDATA,username);
    if (isOAuth || isSaml) {
      mAccountMgr.setAuthToken(mAccount,mAuthTokenType,mAuthToken);
    }
    mAccountMgr.setUserData(mAccount,Constants.KEY_OC_VERSION,mServerInfo.mVersion.getVersion());
    mAccountMgr.setUserData(mAccount,Constants.KEY_OC_BASE_URL,mServerInfo.mBaseUrl);
    if (authResult.getData() != null) {
      try {
        UserInfo userInfo=(UserInfo)authResult.getData().get(0);
        mAccountMgr.setUserData(mAccount,Constants.KEY_DISPLAY_NAME,userInfo.mDisplayName);
      }
 catch (      ClassCastException c) {
        Log_OC.w(TAG,"Couldn't get display name for " + username);
      }
    }
 else {
      Log_OC.w(TAG,"Couldn't get display name for " + username);
    }
    if (isSaml) {
      mAccountMgr.setUserData(mAccount,Constants.KEY_SUPPORTS_SAML_WEB_SSO,"TRUE");
    }
 else     if (isOAuth) {
      mAccountMgr.setUserData(mAccount,Constants.KEY_SUPPORTS_OAUTH2,"TRUE");
    }
    setAccountAuthenticatorResult(intent.getExtras());
    setResult(RESULT_OK,intent);
    return true;
  }
}
