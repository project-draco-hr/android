{
  WebdavClient wc=OwnCloudClientUtils.createOwnCloudClient(mAccount,getSherlockActivity().getApplicationContext());
  AccountManager am=AccountManager.get(getSherlockActivity());
  String baseUrl=am.getUserData(mAccount,AccountAuthenticator.KEY_OC_BASE_URL);
  OwnCloudVersion ocv=new OwnCloudVersion(am.getUserData(mAccount,AccountAuthenticator.KEY_OC_VERSION));
  String webdav_path=AccountUtils.getWebdavPath(ocv);
  Log.d("ASD","" + baseUrl + webdav_path+ WebdavUtils.encodePath(mOld.getRemotePath()));
  Log.e("ASD",Uri.parse(baseUrl).getPath() == null ? "" : Uri.parse(baseUrl).getPath() + webdav_path + WebdavUtils.encodePath(mNew.getRemotePath()));
  LocalMoveMethod move=new LocalMoveMethod(baseUrl + webdav_path + WebdavUtils.encodePath(mOld.getRemotePath()),Uri.parse(baseUrl).getPath() == null ? "" : Uri.parse(baseUrl).getPath() + webdav_path + WebdavUtils.encodePath(mNew.getRemotePath()));
  boolean success=false;
  try {
    int status=wc.executeMethod(move);
    success=move.succeeded();
    move.getResponseBodyAsString();
    Log.d(TAG,"Move returned status: " + status);
  }
 catch (  HttpException e) {
    Log.e(TAG,"HTTP Exception renaming file " + mOld.getRemotePath() + " to "+ mNew.getRemotePath(),e);
  }
catch (  IOException e) {
    Log.e(TAG,"I/O Exception renaming file " + mOld.getRemotePath() + " to "+ mNew.getRemotePath(),e);
  }
catch (  Exception e) {
    Log.e(TAG,"Unexpected exception renaming file " + mOld.getRemotePath() + " to "+ mNew.getRemotePath(),e);
  }
 finally {
    move.releaseConnection();
  }
  if (success) {
    FileDataStorageManager fdsm=new FileDataStorageManager(mAccount,getActivity().getContentResolver());
    fdsm.removeFile(mOld);
    fdsm.saveFile(mNew);
    mFile=mNew;
    mHandler.post(new Runnable(){
      @Override public void run(){
        boolean inDisplayActivity=getActivity() instanceof FileDisplayActivity;
        getActivity().dismissDialog((inDisplayActivity) ? FileDisplayActivity.DIALOG_SHORT_WAIT : FileDetailActivity.DIALOG_SHORT_WAIT);
        updateFileDetails(mFile,mAccount);
        mContainerActivity.onFileStateChanged();
      }
    }
);
  }
 else {
    mHandler.post(new Runnable(){
      @Override public void run(){
        if (mNew.isDown()) {
          File f=new File(mNew.getStoragePath());
          if (!f.renameTo(new File(mOld.getStoragePath()))) {
            mFile.setStoragePath(mNew.getStoragePath());
            FileDataStorageManager fdsm=new FileDataStorageManager(mAccount,getActivity().getContentResolver());
            fdsm.saveFile(mFile);
          }
        }
        boolean inDisplayActivity=getActivity() instanceof FileDisplayActivity;
        getActivity().dismissDialog((inDisplayActivity) ? FileDisplayActivity.DIALOG_SHORT_WAIT : FileDetailActivity.DIALOG_SHORT_WAIT);
        try {
          Toast msg=Toast.makeText(getActivity(),R.string.rename_server_fail_msg,Toast.LENGTH_LONG);
          msg.show();
        }
 catch (        NotFoundException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
}
