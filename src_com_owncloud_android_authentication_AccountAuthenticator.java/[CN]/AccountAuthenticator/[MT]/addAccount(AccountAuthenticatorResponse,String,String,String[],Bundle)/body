{
  Log_OC.i(TAG,"Adding account with type " + accountType + " and auth token "+ authTokenType);
  final Bundle bundle=new Bundle();
  AccountManager accountManager=AccountManager.get(mContext);
  Account[] accounts=accountManager.getAccountsByType(MainApp.getAccountType());
  if (mContext.getResources().getBoolean(R.bool.multiaccount_support) || accounts.length < 1) {
    try {
      validateAccountType(accountType);
    }
 catch (    AuthenticatorException e) {
      Log_OC.e(TAG,"Failed to validate account type " + accountType + ": "+ e.getMessage());
      e.printStackTrace();
      return e.getFailureBundle();
    }
    final Intent intent=new Intent(mContext,AuthenticatorActivity.class);
    intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,response);
    intent.putExtra(KEY_AUTH_TOKEN_TYPE,authTokenType);
    intent.putExtra(KEY_REQUIRED_FEATURES,requiredFeatures);
    intent.putExtra(KEY_LOGIN_OPTIONS,options);
    intent.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_CREATE);
    setIntentFlags(intent);
    bundle.putParcelable(AccountManager.KEY_INTENT,intent);
  }
 else {
    bundle.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION);
    final String message=String.format(mContext.getString(R.string.auth_unsupported_multiaccount),mContext.getString(R.string.app_name));
    bundle.putString(AccountManager.KEY_ERROR_MESSAGE,message);
    mHandler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(mContext,message,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
  return bundle;
}
