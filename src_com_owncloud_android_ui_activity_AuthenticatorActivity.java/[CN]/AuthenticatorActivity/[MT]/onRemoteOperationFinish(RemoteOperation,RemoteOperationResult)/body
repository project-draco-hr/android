{
  if (operation instanceof ConnectionCheckOperation) {
    mStatusText=mStatusIcon=0;
    mStatusCorrect=false;
    String t_url=((TextView)findViewById(R.id.host_URL)).getText().toString().trim().toLowerCase();
switch (result.getCode()) {
case OK_SSL:
      mIsSslConn=true;
    mStatusIcon=android.R.drawable.ic_secure;
  mStatusText=R.string.auth_secure_connection;
mStatusCorrect=true;
break;
case OK_NO_SSL:
case OK:
mIsSslConn=false;
mStatusCorrect=true;
if (t_url.startsWith("http://")) {
mStatusText=R.string.auth_connection_established;
mStatusIcon=R.drawable.ic_ok;
}
 else {
mStatusText=R.string.auth_nossl_plain_ok_title;
mStatusIcon=android.R.drawable.ic_partial_secure;
}
break;
case BAD_OC_VERSION:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_bad_oc_version_title;
break;
case WRONG_CONNECTION:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_wrong_connection_title;
break;
case TIMEOUT:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_timeout_title;
break;
case INCORRECT_ADDRESS:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_incorrect_address_title;
break;
case SSL_RECOVERABLE_PEER_UNVERIFIED:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_ssl_unverified_server_title;
mLastSslUntrustedServerResult=result;
showDialog(DIALOG_SSL_VALIDATOR);
break;
case SSL_ERROR:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_ssl_general_error_title;
break;
case HOST_NOT_AVAILABLE:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_unknown_host_title;
break;
case NO_NETWORK_CONNECTION:
mStatusIcon=R.drawable.no_network;
mStatusText=R.string.auth_no_net_conn_title;
break;
case INSTANCE_NOT_CONFIGURED:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_not_configured_title;
break;
case FILE_NOT_FOUND:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_incorrect_path_title;
break;
case UNHANDLED_HTTP_CODE:
case UNKNOWN_ERROR:
mStatusIcon=R.drawable.common_error;
mStatusText=R.string.auth_unknown_error_title;
break;
default :
Log.e(TAG,"Incorrect connection checker result type: " + result.getHttpCode());
}
setResultIconAndText(mStatusIcon,mStatusText);
if (!mStatusCorrect) findViewById(R.id.refreshButton).setVisibility(View.VISIBLE);
 else findViewById(R.id.refreshButton).setVisibility(View.INVISIBLE);
findViewById(R.id.buttonOK).setEnabled(mStatusCorrect);
}
 else if (operation instanceof GetOAuth2AccessToken) {
try {
dismissDialog(OAUTH2_LOGIN_PROGRESS);
}
 catch (IllegalArgumentException e) {
}
if (result.isSuccess()) {
String url=((TextView)findViewById(R.id.host_URL)).getText().toString().trim();
if (url.endsWith("/")) url=url.substring(0,url.length() - 1);
Uri uri=null;
String prefix="";
if (mIsSslConn) {
prefix="https://";
}
 else {
prefix="http://";
}
if (url.toLowerCase().startsWith("http://") || url.toLowerCase().startsWith("https://")) {
prefix="";
}
try {
mBaseUrl=prefix + url;
String url_str=prefix + url + "/remote.php/odav";
uri=Uri.parse(url_str);
}
 catch (Exception e) {
onAuthenticationResult(false,getString(R.string.auth_incorrect_address_title));
return;
}
showDialog(DIALOG_LOGIN_PROGRESS);
String accessToken=((GetOAuth2AccessToken)operation).getResultTokenMap().get(OAuth2Context.KEY_ACCESS_TOKEN);
Log.d(TAG,"Got ACCESS TOKEN: " + accessToken);
mAuthChkOperation=new ExistenceCheckOperation("",this,accessToken);
WebdavClient client=OwnCloudClientUtils.createOwnCloudClient(uri,getApplicationContext());
mAuthChkOperation.execute(client,this,mHandler);
}
 else {
TextView tv=(TextView)findViewById(R.id.oAuth_URL);
tv.setError("A valid authorization could not be obtained");
}
}
 else if (operation instanceof ExistenceCheckOperation) {
try {
dismissDialog(DIALOG_LOGIN_PROGRESS);
}
 catch (IllegalArgumentException e) {
}
if (result.isSuccess()) {
TextView tv=(TextView)findViewById(R.id.oAuth_URL);
Log.d(TAG,"Checked access - time to save the account");
Uri uri=Uri.parse(mBaseUrl);
String username="OAuth_user" + (new java.util.Random(System.currentTimeMillis())).nextLong();
String accountName=username + "@" + uri.getHost();
if (uri.getPort() >= 0) {
accountName+=":" + uri.getPort();
}
Account account=new Account(accountName,AccountAuthenticator.ACCOUNT_TYPE);
AccountManager accManager=AccountManager.get(this);
accManager.addAccountExplicitly(account,"",null);
Account defaultAccount=AccountUtils.getCurrentOwnCloudAccount(this);
if (defaultAccount == null) {
SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(this).edit();
editor.putString("select_oc_account",accountName);
editor.commit();
}
final Intent intent=new Intent();
intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,AccountAuthenticator.ACCOUNT_TYPE);
intent.putExtra(AccountManager.KEY_ACCOUNT_NAME,account.name);
intent.putExtra(AccountManager.KEY_USERDATA,username);
accManager.setAuthToken(account,AccountAuthenticator.AUTH_TOKEN_TYPE_ACCESS_TOKEN,((ExistenceCheckOperation)operation).getAccessToken());
accManager.setUserData(account,AccountAuthenticator.KEY_OC_VERSION,mConnChkRunnable.getDiscoveredVersion().toString());
accManager.setUserData(account,AccountAuthenticator.KEY_OC_BASE_URL,mBaseUrl);
accManager.setUserData(account,AccountAuthenticator.KEY_SUPPORTS_OAUTH2,"TRUE");
setAccountAuthenticatorResult(intent.getExtras());
setResult(RESULT_OK,intent);
Bundle bundle=new Bundle();
bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
ContentResolver.requestSync(account,"org.owncloud",bundle);
finish();
}
 else {
TextView tv=(TextView)findViewById(R.id.oAuth_URL);
tv.setError(result.getLogMessage());
Log.d(TAG,"Access failed: " + result.getLogMessage());
}
}
}
