{
  Iterator<OCFile> filesIt=files.iterator();
  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(files.size());
  OCFile file=null;
  while (filesIt.hasNext()) {
    file=filesIt.next();
    ContentValues cv=new ContentValues();
    cv.put(ProviderTableMeta.FILE_MODIFIED,file.getModificationTimestamp());
    cv.put(ProviderTableMeta.FILE_CREATION,file.getCreationTimestamp());
    cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,file.getFileLength());
    cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,file.getMimetype());
    cv.put(ProviderTableMeta.FILE_NAME,file.getFileName());
    if (file.getParentId() != 0)     cv.put(ProviderTableMeta.FILE_PARENT,file.getParentId());
    cv.put(ProviderTableMeta.FILE_PATH,file.getRemotePath());
    if (!file.isDirectory())     cv.put(ProviderTableMeta.FILE_STORAGE_PATH,file.getStoragePath());
    cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);
    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,file.getLastSyncDateForProperties());
    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,file.getLastSyncDateForData());
    cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,file.keepInSync() ? 1 : 0);
    if (fileExists(file.getRemotePath())) {
      OCFile oldFile=getFileByPath(file.getRemotePath());
      file.setFileId(oldFile.getFileId());
      operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())}).build());
    }
 else     if (fileExists(file.getFileId())) {
      OCFile oldFile=getFileById(file.getFileId());
      if (file.getStoragePath() == null && oldFile.getStoragePath() != null)       file.setStoragePath(oldFile.getStoragePath());
      if (!file.isDirectory())       ;
      cv.put(ProviderTableMeta.FILE_STORAGE_PATH,file.getStoragePath());
      operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())}).build());
    }
 else {
      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI).withValues(cv).build());
    }
  }
  ContentProviderResult[] results=null;
  try {
    if (getContentResolver() != null) {
      results=getContentResolver().applyBatch(ProviderMeta.AUTHORITY_FILES,operations);
    }
 else {
      results=getContentProvider().applyBatch(operations);
    }
  }
 catch (  OperationApplicationException e) {
    Log.e(TAG,"Fail to update/insert list of files to database " + e.getMessage());
  }
catch (  RemoteException e) {
    Log.e(TAG,"Fail to update/insert list of files to database " + e.getMessage());
  }
  if (results != null) {
    long newId;
    for (int i=0; i < results.length; i++) {
      if (results[i].uri != null) {
        newId=Long.parseLong(results[i].uri.getPathSegments().get(1));
        files.get(i).setFileId(newId);
      }
    }
  }
  for (  OCFile aFile : files) {
    if (aFile.isDirectory() && aFile.needsUpdatingWhileSaving())     saveFiles(getDirectoryContent(aFile));
  }
}
