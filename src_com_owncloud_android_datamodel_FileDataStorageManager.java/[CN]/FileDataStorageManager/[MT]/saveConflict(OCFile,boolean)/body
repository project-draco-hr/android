{
  if (!file.isDown()) {
    inConflict=false;
  }
  ContentValues cv=new ContentValues();
  cv.put(ProviderTableMeta.FILE_IN_CONFLICT,inConflict ? 1 : 0);
  int updated=0;
  if (getContentResolver() != null) {
    updated=getContentResolver().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())});
  }
 else {
    try {
      updated=getContentProviderClient().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())});
    }
 catch (    RemoteException e) {
      Log_OC.e(TAG,"Failed saving conflict in database " + e.getMessage());
    }
  }
  Log_OC.d(TAG,"Number of files updated with CONFLICT: " + updated);
  if (updated > 0) {
    if (inConflict) {
      long parentId=file.getParentId();
      Set<String> ancestorIds=new HashSet<String>();
      while (parentId != FileDataStorageManager.ROOT_PARENT_ID) {
        ancestorIds.add(Long.toString(parentId));
        parentId=getFileById(parentId).getParentId();
      }
      if (ancestorIds.size() > 0) {
        StringBuffer whereBuffer=new StringBuffer();
        whereBuffer.append(ProviderTableMeta._ID).append(" IN (");
        for (int i=0; i < ancestorIds.size() - 1; i++) {
          whereBuffer.append("?,");
        }
        whereBuffer.append("?");
        whereBuffer.append(")");
        if (getContentResolver() != null) {
          updated=getContentResolver().update(ProviderTableMeta.CONTENT_URI_FILE,cv,whereBuffer.toString(),ancestorIds.toArray(new String[]{}));
        }
 else {
          try {
            updated=getContentProviderClient().update(ProviderTableMeta.CONTENT_URI_FILE,cv,whereBuffer.toString(),ancestorIds.toArray(new String[]{}));
          }
 catch (          RemoteException e) {
            Log_OC.e(TAG,"Failed saving conflict in database " + e.getMessage());
          }
        }
      }
    }
 else {
      String parentPath=file.getRemotePath();
      if (parentPath.endsWith(OCFile.PATH_SEPARATOR)) {
        parentPath=parentPath.substring(0,parentPath.length() - 1);
      }
      parentPath=parentPath.substring(0,parentPath.lastIndexOf(OCFile.PATH_SEPARATOR) + 1);
      Log_OC.d(TAG,"checking parents to remove conflict; STARTING with " + parentPath);
      while (parentPath.length() > 0) {
        String where=ProviderTableMeta.FILE_IN_CONFLICT + " = 1 AND " + ProviderTableMeta.FILE_CONTENT_TYPE+ " != 'DIR' AND "+ ProviderTableMeta.FILE_ACCOUNT_OWNER+ " = ? AND "+ ProviderTableMeta.FILE_PATH+ " LIKE ?";
        Cursor descendentsInConflict=getContentResolver().query(ProviderTableMeta.CONTENT_URI_FILE,new String[]{ProviderTableMeta._ID},where,new String[]{mAccount.name,parentPath + "%"},null);
        if (descendentsInConflict == null || descendentsInConflict.getCount() == 0) {
          Log_OC.d(TAG,"NO MORE conflicts in " + parentPath);
          if (getContentResolver() != null) {
            updated=getContentResolver().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ "=?",new String[]{mAccount.name,parentPath});
          }
 else {
            try {
              updated=getContentProviderClient().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ "=?",new String[]{mAccount.name,parentPath});
            }
 catch (            RemoteException e) {
              Log_OC.e(TAG,"Failed saving conflict in database " + e.getMessage());
            }
          }
        }
 else {
          Log_OC.d(TAG,"STILL " + descendentsInConflict.getCount() + " in "+ parentPath);
        }
        if (descendentsInConflict != null) {
          descendentsInConflict.close();
        }
        parentPath=parentPath.substring(0,parentPath.length() - 1);
        parentPath=parentPath.substring(0,parentPath.lastIndexOf(OCFile.PATH_SEPARATOR) + 1);
        Log_OC.d(TAG,"checking parents to remove conflict; NEXT " + parentPath);
      }
    }
  }
}
