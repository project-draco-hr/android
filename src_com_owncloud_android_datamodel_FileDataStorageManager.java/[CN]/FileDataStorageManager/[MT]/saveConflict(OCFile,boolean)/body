{
  if (!file.isDown()) {
    inConflict=false;
  }
  ContentValues cv=new ContentValues();
  cv.put(ProviderTableMeta.FILE_IN_CONFLICT,inConflict);
  int updated=0;
  if (getContentResolver() != null) {
    updated=getContentResolver().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())});
  }
 else {
    try {
      updated=getContentProviderClient().update(ProviderTableMeta.CONTENT_URI_FILE,cv,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())});
    }
 catch (    RemoteException e) {
      Log_OC.e(TAG,"Failed saving conflict in database " + e.getMessage());
    }
  }
  Log_OC.d(TAG,"Number of files updated with CONFLICT: " + updated);
  if (updated > 0) {
    if (inConflict) {
      long parentId=file.getParentId();
      Set<String> ancestorIds=new HashSet<String>();
      while (parentId != FileDataStorageManager.ROOT_PARENT_ID) {
        ancestorIds.add(Long.toString(parentId));
        parentId=getFileById(parentId).getParentId();
      }
      if (ancestorIds.size() > 0) {
        StringBuffer whereBuffer=new StringBuffer();
        whereBuffer.append(ProviderTableMeta._ID).append(" IN (");
        for (int i=0; i < ancestorIds.size() - 1; i++) {
          whereBuffer.append("?,");
        }
        whereBuffer.append("?");
        whereBuffer.append(")");
        if (getContentResolver() != null) {
          updated=getContentResolver().update(ProviderTableMeta.CONTENT_URI_FILE,cv,whereBuffer.toString(),ancestorIds.toArray(new String[]{}));
        }
 else {
          try {
            updated=getContentProviderClient().update(ProviderTableMeta.CONTENT_URI_FILE,cv,whereBuffer.toString(),ancestorIds.toArray(new String[]{}));
          }
 catch (          RemoteException e) {
            Log_OC.e(TAG,"Failed saving conflict in database " + e.getMessage());
          }
        }
      }
    }
 else {
    }
  }
  Log_OC.d(TAG,"Number of parents updated with CONFLICT: " + updated);
}
