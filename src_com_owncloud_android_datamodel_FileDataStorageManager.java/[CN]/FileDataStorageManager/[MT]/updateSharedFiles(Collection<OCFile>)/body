{
  resetShareFlagsInAllFiles();
  if (sharedFiles != null) {
    ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(sharedFiles.size());
    for (    OCFile file : sharedFiles) {
      ContentValues cv=new ContentValues();
      cv.put(ProviderTableMeta.FILE_MODIFIED,file.getModificationTimestamp());
      cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA,file.getModificationTimestampAtLastSyncForData());
      cv.put(ProviderTableMeta.FILE_CREATION,file.getCreationTimestamp());
      cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,file.getFileLength());
      cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,file.getMimetype());
      cv.put(ProviderTableMeta.FILE_NAME,file.getFileName());
      cv.put(ProviderTableMeta.FILE_PARENT,file.getParentId());
      cv.put(ProviderTableMeta.FILE_PATH,file.getRemotePath());
      if (!file.isFolder()) {
        cv.put(ProviderTableMeta.FILE_STORAGE_PATH,file.getStoragePath());
      }
      cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);
      cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,file.getLastSyncDateForProperties());
      cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,file.getLastSyncDateForData());
      cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,file.isFavorite() ? 1 : 0);
      cv.put(ProviderTableMeta.FILE_ETAG,file.getEtag());
      cv.put(ProviderTableMeta.FILE_SHARED_VIA_LINK,file.isSharedViaLink() ? 1 : 0);
      cv.put(ProviderTableMeta.FILE_SHARED_VIA_USERS,file.isSharedViaUsers() ? 1 : 0);
      cv.put(ProviderTableMeta.FILE_PUBLIC_LINK,file.getPublicLink());
      cv.put(ProviderTableMeta.FILE_PERMISSIONS,file.getPermissions());
      cv.put(ProviderTableMeta.FILE_REMOTE_ID,file.getRemoteId());
      cv.put(ProviderTableMeta.FILE_UPDATE_THUMBNAIL,file.needsUpdateThumbnail() ? 1 : 0);
      cv.put(ProviderTableMeta.FILE_IS_DOWNLOADING,file.isDownloading() ? 1 : 0);
      cv.put(ProviderTableMeta.FILE_ETAG_IN_CONFLICT,file.getEtagInConflict());
      boolean existsByPath=fileExists(file.getRemotePath());
      if (existsByPath || fileExists(file.getFileId())) {
        operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())}).build());
      }
 else {
        operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI).withValues(cv).build());
      }
    }
    if (operations.size() > 0) {
      @SuppressWarnings("unused") ContentProviderResult[] results=null;
      Log_OC.d(TAG,"Sending " + operations.size() + " operations to FileContentProvider");
      try {
        if (getContentResolver() != null) {
          results=getContentResolver().applyBatch(MainApp.getAuthority(),operations);
        }
 else {
          results=getContentProviderClient().applyBatch(operations);
        }
      }
 catch (      OperationApplicationException e) {
        Log_OC.e(TAG,"Exception in batch of operations " + e.getMessage());
      }
catch (      RemoteException e) {
        Log_OC.e(TAG,"Exception in batch of operations  " + e.getMessage());
      }
    }
  }
}
