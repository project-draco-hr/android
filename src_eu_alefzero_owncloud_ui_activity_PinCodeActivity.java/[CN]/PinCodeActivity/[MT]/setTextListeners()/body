{
  mText1.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (s.length() > 0) {
        if (!confirmingPinCode) {
          tempText[0]=mText1.getText().toString();
        }
        mText2.requestFocus();
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mText2.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (s.length() > 0) {
        if (!confirmingPinCode) {
          tempText[1]=mText2.getText().toString();
        }
        mText3.requestFocus();
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mText2.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && bChange) {
        mText1.setText("");
        mText1.requestFocus();
        if (!confirmingPinCode)         tempText[0]="";
        bChange=false;
      }
 else       if (!bChange) {
        bChange=true;
      }
      return false;
    }
  }
);
  mText2.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText2.setCursorVisible(true);
      if (mText1.getText().toString().equals("")) {
        mText2.setSelected(false);
        mText2.setCursorVisible(false);
        mText1.requestFocus();
        mText1.setSelected(true);
        mText1.setSelection(0);
      }
    }
  }
);
  mText3.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (s.length() > 0) {
        if (!confirmingPinCode) {
          tempText[2]=mText3.getText().toString();
        }
        mText4.requestFocus();
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mText3.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && bChange) {
        mText2.requestFocus();
        if (!confirmingPinCode)         tempText[1]="";
        mText2.setText("");
        bChange=false;
      }
 else       if (!bChange) {
        bChange=true;
      }
      return false;
    }
  }
);
  mText3.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText3.setCursorVisible(true);
      if (mText1.getText().toString().equals("")) {
        mText3.setSelected(false);
        mText3.setCursorVisible(false);
        mText1.requestFocus();
        mText1.setSelected(true);
        mText1.setSelection(0);
      }
 else       if (mText2.getText().toString().equals("")) {
        mText3.setSelected(false);
        mText3.setCursorVisible(false);
        mText2.requestFocus();
        mText2.setSelected(true);
        mText2.setSelection(0);
      }
    }
  }
);
  mText4.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (s.length() > 0) {
        if (!confirmingPinCode) {
          tempText[3]=mText4.getText().toString();
        }
        mText1.requestFocus();
        if (!pinCodeChecked) {
          pinCodeChecked=checkPincode();
        }
        if (pinCodeChecked && activity.equals("FileDisplayActivity")) {
          finish();
        }
 else         if (pinCodeChecked) {
          Intent intent=getIntent();
          String newState=intent.getStringExtra(EXTRA_NEW_STATE);
          if (newState.equals("false")) {
            SharedPreferences.Editor appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
            appPrefs.putBoolean("set_pincode",false);
            appPrefs.commit();
            setInitVars();
            pinCodeEnd(false);
          }
 else {
            if (!confirmingPinCode) {
              pinCodeChangeRequest();
            }
 else {
              confirmPincode();
            }
          }
        }
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mText4.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && bChange) {
        mText3.requestFocus();
        if (!confirmingPinCode)         tempText[2]="";
        mText3.setText("");
        bChange=false;
      }
 else       if (!bChange) {
        bChange=true;
      }
      return false;
    }
  }
);
  mText4.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText4.setCursorVisible(true);
      if (mText1.getText().toString().equals("")) {
        mText4.setSelected(false);
        mText4.setCursorVisible(false);
        mText1.requestFocus();
        mText1.setSelected(true);
        mText1.setSelection(0);
      }
 else       if (mText2.getText().toString().equals("")) {
        mText4.setSelected(false);
        mText4.setCursorVisible(false);
        mText2.requestFocus();
        mText2.setSelected(true);
        mText2.setSelection(0);
      }
 else       if (mText3.getText().toString().equals("")) {
        mText4.setSelected(false);
        mText4.setCursorVisible(false);
        mText3.requestFocus();
        mText3.setSelected(true);
        mText3.setSelection(0);
      }
    }
  }
);
}
