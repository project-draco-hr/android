{
  String message=null;
  if (operation instanceof UploadFileOperation) {
    if (result.isSuccess()) {
      message=String.format(res.getString(R.string.uploader_upload_succeeded_content_single),((UploadFileOperation)operation).getFileName());
    }
 else {
      if (result.getCode() == ResultCode.LOCAL_STORAGE_FULL || result.getCode() == ResultCode.LOCAL_STORAGE_NOT_COPIED) {
        message=String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName(),res.getString(R.string.app_name));
      }
 else       if (result.getCode() == ResultCode.FORBIDDEN) {
        message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.uploader_upload_forbidden_permissions));
      }
 else {
        message=String.format(res.getString(R.string.uploader_upload_failed_content_single),((UploadFileOperation)operation).getFileName());
      }
    }
  }
 else   if (operation instanceof DownloadFileOperation) {
    if (result.isSuccess()) {
      message=String.format(res.getString(R.string.downloader_download_succeeded_content),new File(((DownloadFileOperation)operation).getSavePath()).getName());
    }
 else {
      if (result.getCode() == ResultCode.FILE_NOT_FOUND) {
        message=res.getString(R.string.downloader_download_file_not_found);
      }
 else {
        message=String.format(res.getString(R.string.downloader_download_failed_content),new File(((DownloadFileOperation)operation).getSavePath()).getName());
      }
    }
  }
 else   if (operation instanceof RemoveFileOperation) {
    if (result.isSuccess()) {
      message=res.getString(R.string.remove_success_msg);
    }
 else {
      if (result.getCode().equals(ResultCode.FORBIDDEN)) {
        message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.forbidden_permissions_delete));
      }
 else       if (isNetworkError(result.getCode())) {
        message=getErrorMessage(result,res);
      }
 else {
        message=res.getString(R.string.remove_fail_msg);
      }
    }
  }
 else   if (operation instanceof RenameFileOperation) {
    if (result.getCode().equals(ResultCode.INVALID_LOCAL_FILE_NAME)) {
      message=res.getString(R.string.rename_local_fail_msg);
    }
 else     if (result.getCode().equals(ResultCode.FORBIDDEN)) {
      message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.forbidden_permissions_rename));
    }
 else     if (result.getCode().equals(ResultCode.INVALID_CHARACTER_IN_NAME)) {
      message=res.getString(R.string.filename_forbidden_characters);
    }
 else     if (isNetworkError(result.getCode())) {
      message=getErrorMessage(result,res);
    }
 else {
      message=res.getString(R.string.rename_server_fail_msg);
    }
  }
 else   if (operation instanceof SynchronizeFileOperation) {
    if (!((SynchronizeFileOperation)operation).transferWasRequested()) {
      message=res.getString(R.string.sync_file_nothing_to_do_msg);
    }
  }
 else   if (operation instanceof CreateFolderOperation) {
    if (result.getCode() == ResultCode.INVALID_CHARACTER_IN_NAME) {
      message=res.getString(R.string.filename_forbidden_characters);
    }
 else     if (result.getCode().equals(ResultCode.FORBIDDEN)) {
      message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.forbidden_permissions_create));
    }
 else     if (isNetworkError(result.getCode())) {
      message=getErrorMessage(result,res);
    }
 else {
      message=res.getString(R.string.create_dir_fail_msg);
    }
  }
 else   if (operation instanceof CreateShareOperation) {
    if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {
      message=res.getString(R.string.share_link_file_no_exist);
    }
 else     if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {
      message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.share_link_forbidden_permissions));
    }
 else     if (isNetworkError(result.getCode())) {
      message=getErrorMessage(result,res);
    }
 else {
      message=res.getString(R.string.share_link_file_error);
    }
  }
 else   if (operation instanceof UnshareLinkOperation) {
    if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {
      message=res.getString(R.string.unshare_link_file_no_exist);
    }
 else     if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {
      message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.unshare_link_forbidden_permissions));
    }
 else     if (isNetworkError(result.getCode())) {
      message=getErrorMessage(result,res);
    }
 else {
      message=res.getString(R.string.unshare_link_file_error);
    }
  }
 else   if (operation instanceof MoveFileOperation) {
    if (result.getCode() == ResultCode.INVALID_MOVE_INTO_DESCENDANT) {
      message=res.getString(R.string.move_file_invalid_into_descendent);
    }
 else     if (result.getCode() == ResultCode.INVALID_OVERWRITE) {
      message=res.getString(R.string.move_file_invalid_overwrite);
    }
 else     if (result.getCode() == ResultCode.FORBIDDEN) {
      message=String.format(res.getString(R.string.forbidden_permissions),res.getString(R.string.forbidden_permissions_move));
    }
 else {
      message=res.getString(R.string.move_file_error);
    }
  }
  return message;
}
