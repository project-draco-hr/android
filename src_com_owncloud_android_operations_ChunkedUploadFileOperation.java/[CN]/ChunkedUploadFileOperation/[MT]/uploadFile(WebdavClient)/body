{
  int status=-1;
  FileChannel channel=null;
  RandomAccessFile raf=null;
  try {
    File file=new File(getStoragePath());
    raf=new RandomAccessFile(file,"r");
    channel=raf.getChannel();
    ChunkFromFileChannelRequestEntity entity=new ChunkFromFileChannelRequestEntity(channel,getMimeType(),CHUNK_SIZE,file);
    entity.addOnDatatransferProgressListeners(getDataTransferListeners());
    long offset=0;
    String uriPrefix=client.getBaseUri() + WebdavUtils.encodePath(getRemotePath()) + "-chunking-"+ Math.abs((new Random()).nextInt(9000) + 1000)+ "-";
    long chunkCount=(long)Math.ceil((double)file.length() / CHUNK_SIZE);
    for (int chunkIndex=0; chunkIndex < chunkCount; chunkIndex++, offset+=CHUNK_SIZE) {
      mPutMethod=new PutMethod(uriPrefix + chunkCount + "-"+ chunkIndex);
      mPutMethod.addRequestHeader(OC_CHUNKED_HEADER,OC_CHUNKED_HEADER);
      entity.setOffset(offset);
      mPutMethod.setRequestEntity(entity);
      status=client.executeMethod(mPutMethod);
      client.exhaustResponse(mPutMethod.getResponseBodyAsStream());
      Log.d(TAG,"Upload of " + getStoragePath() + " to "+ getRemotePath()+ ", chunk index "+ chunkIndex+ ", count "+ chunkCount+ ", HTTP result status "+ status);
      if (!isSuccess(status))       break;
    }
  }
  finally {
    if (channel != null)     channel.close();
    if (raf != null)     raf.close();
    if (mPutMethod != null)     mPutMethod.releaseConnection();
  }
  return status;
}
