{
  FileOutputStream fos=null;
  List<HistoricalRecord> records=null;
synchronized (mInstanceLock) {
    records=new ArrayList<HistoricalRecord>(mHistoricalRecords);
  }
  try {
    fos=mContext.openFileOutput(mHistoryFileName,Context.MODE_PRIVATE);
  }
 catch (  FileNotFoundException fnfe) {
    Log.e(LOG_TAG,"Error writing historical recrod file: " + mHistoryFileName,fnfe);
    return;
  }
  XmlSerializer serializer=Xml.newSerializer();
  try {
    serializer.setOutput(fos,null);
    serializer.startDocument("UTF-8",true);
    serializer.startTag(null,TAG_HISTORICAL_RECORDS);
    final int recordCount=records.size();
    for (int i=0; i < recordCount; i++) {
      HistoricalRecord record=records.remove(0);
      serializer.startTag(null,TAG_HISTORICAL_RECORD);
      serializer.attribute(null,ATTRIBUTE_ACTIVITY,record.activity.flattenToString());
      serializer.attribute(null,ATTRIBUTE_TIME,String.valueOf(record.time));
      serializer.attribute(null,ATTRIBUTE_WEIGHT,String.valueOf(record.weight));
      serializer.endTag(null,TAG_HISTORICAL_RECORD);
      if (DEBUG) {
        Log.i(LOG_TAG,"Wrote " + record.toString());
      }
    }
    serializer.endTag(null,TAG_HISTORICAL_RECORDS);
    serializer.endDocument();
    if (DEBUG) {
      Log.i(LOG_TAG,"Wrote " + recordCount + " historical records.");
    }
  }
 catch (  IllegalArgumentException iae) {
    Log.e(LOG_TAG,"Error writing historical recrod file: " + mHistoryFileName,iae);
  }
catch (  IllegalStateException ise) {
    Log.e(LOG_TAG,"Error writing historical recrod file: " + mHistoryFileName,ise);
  }
catch (  IOException ioe) {
    Log.e(LOG_TAG,"Error writing historical recrod file: " + mHistoryFileName,ioe);
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
