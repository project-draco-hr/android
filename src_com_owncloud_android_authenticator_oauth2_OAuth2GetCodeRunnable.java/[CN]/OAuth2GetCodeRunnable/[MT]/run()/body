{
  ResultOAuthType mLatestResult;
  String targetURI=null;
  JSONObject codeResponseJson=null;
  if (!isOnline()) {
    postResult(ResultOAuthType.NO_NETWORK_CONNECTION,null);
    return;
  }
  if (mUrl.startsWith("http://") || mUrl.startsWith("https://")) {
    mLatestResult=(mUrl.startsWith("https://")) ? ResultOAuthType.OK_SSL : ResultOAuthType.OK_NO_SSL;
  }
 else {
    mUrl="https://" + mUrl;
    mLatestResult=ResultOAuthType.OK_SSL;
  }
  targetURI=mUrl + OAuth2Context.OAUTH2_DEVICE_GETCODE_URL;
  ConnectorOAuth2 connectorOAuth2=new ConnectorOAuth2(targetURI);
  try {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(CODE_CLIENT_ID,OAuth2Context.OAUTH2_DEVICE_CLIENT_ID));
    nameValuePairs.add(new BasicNameValuePair(CODE_CLIENT_SCOPE,OAuth2Context.OAUTH2_DEVICE_GETCODE_SCOPES));
    UrlEncodedFormEntity params=new UrlEncodedFormEntity(nameValuePairs);
    codeResponseJson=new JSONObject(connectorOAuth2.connPost(params));
  }
 catch (  JSONException e) {
    Log.e(TAG,"JSONException converting to Json: " + e.toString());
  }
catch (  UnsupportedEncodingException e) {
    Log.e(TAG,"UnsupportedEncodingException encoding URL values: " + e.toString());
  }
catch (  Exception e) {
    Log.e(TAG,"Exception : " + e.toString());
  }
  if (codeResponseJson == null) {
    mLatestResult=ResultOAuthType.HOST_NOT_AVAILABLE;
  }
  postResult(mLatestResult,codeResponseJson);
}
