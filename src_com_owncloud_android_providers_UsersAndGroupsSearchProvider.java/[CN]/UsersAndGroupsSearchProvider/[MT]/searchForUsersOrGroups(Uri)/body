{
  MatrixCursor response=null;
  String userQuery=uri.getLastPathSegment().toLowerCase();
  Account account=AccountUtils.getCurrentOwnCloudAccount(getContext());
  GetRemoteShareesOperation searchRequest=new GetRemoteShareesOperation(userQuery,REQUESTED_PAGE,RESULTS_PER_PAGE);
  RemoteOperationResult result=searchRequest.execute(account,getContext());
  List<JSONObject> names=new ArrayList<JSONObject>();
  if (result.isSuccess()) {
    for (    Object o : result.getData()) {
      names.add((JSONObject)o);
    }
  }
 else {
    showErrorMessage(result);
  }
  int count=0;
  if (names.size() > 0) {
    response=new MatrixCursor(COLUMNS);
    Iterator<JSONObject> namesIt=names.iterator();
    JSONObject item;
    String displayName;
    Uri dataUri;
    Uri userBaseUri=new Uri.Builder().scheme("content").authority(DATA_USER).build();
    Uri groupBaseUri=new Uri.Builder().scheme("content").authority(DATA_GROUP).build();
    try {
      while (namesIt.hasNext()) {
        item=namesIt.next();
        String userName=item.getString(GetRemoteShareesOperation.PROPERTY_LABEL);
        JSONObject value=item.getJSONObject(GetRemoteShareesOperation.NODE_VALUE);
        byte type=(byte)value.getInt(GetRemoteShareesOperation.PROPERTY_SHARE_TYPE);
        String shareWith=value.getString(GetRemoteShareesOperation.PROPERTY_SHARE_WITH);
        if (GetRemoteShareesOperation.GROUP_TYPE.equals(type)) {
          displayName=getContext().getString(R.string.share_group_clarification,userName);
          dataUri=Uri.withAppendedPath(groupBaseUri,shareWith);
        }
 else {
          displayName=userName;
          dataUri=Uri.withAppendedPath(userBaseUri,shareWith);
        }
        response.newRow().add(count++).add(displayName).add(dataUri);
      }
    }
 catch (    JSONException e) {
      Log_OC.e(TAG,"Exception while parsing data of users/groups",e);
    }
  }
  FileDataStorageManager manager=new FileDataStorageManager(account,getContext().getContentResolver());
  boolean federatedShareAllowed=manager.getCapability(account.name).getFilesSharingFederationOutgoing().isTrue();
  if (userQuery.contains("@") && federatedShareAllowed) {
    if (response == null)     response=new MatrixCursor(COLUMNS);
    Uri remoteBaseUri=new Uri.Builder().scheme("content").authority(DATA_REMOTE).build();
    String displayName=getContext().getString(R.string.share_remote_clarification,userQuery);
    Uri dataUri=Uri.withAppendedPath(remoteBaseUri,userQuery);
    response.newRow().add(count++).add(displayName).add(dataUri);
  }
  return response;
}
