{
  mText0.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        if (!mConfirmingPassCode) {
          mPassCodeDigits[0]=mText0.getText().toString();
        }
        mText1.requestFocus();
      }
 else {
        Log_OC.w(TAG,"Input in text box 0 resulted in empty string");
      }
    }
  }
);
  mText1.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        if (!mConfirmingPassCode) {
          mPassCodeDigits[1]=mText1.getText().toString();
        }
        mText2.requestFocus();
      }
 else {
        Log_OC.w(TAG,"Input in text box 1 resulted in empty string");
      }
    }
  }
);
  mText1.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && mBChange) {
        mText0.setText("");
        mText0.requestFocus();
        if (!mConfirmingPassCode)         mPassCodeDigits[0]="";
        mBChange=false;
      }
 else       if (!mBChange) {
        mBChange=true;
      }
      return false;
    }
  }
);
  mText1.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText1.setCursorVisible(true);
      if (mText0.getText().toString().equals("")) {
        mText1.setSelected(false);
        mText1.setCursorVisible(false);
        mText0.requestFocus();
        mText0.setSelected(true);
        mText0.setSelection(0);
      }
    }
  }
);
  mText2.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        if (!mConfirmingPassCode) {
          mPassCodeDigits[2]=mText2.getText().toString();
        }
        mText3.requestFocus();
      }
 else {
        Log_OC.w(TAG,"Input in text box 2 resulted in empty string");
      }
    }
  }
);
  mText2.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && mBChange) {
        mText1.requestFocus();
        if (!mConfirmingPassCode)         mPassCodeDigits[1]="";
        mText1.setText("");
        mBChange=false;
      }
 else       if (!mBChange) {
        mBChange=true;
      }
      return false;
    }
  }
);
  mText2.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText2.setCursorVisible(true);
      if (mText0.getText().toString().equals("")) {
        mText2.setSelected(false);
        mText2.setCursorVisible(false);
        mText0.requestFocus();
        mText0.setSelected(true);
        mText0.setSelection(0);
      }
 else       if (mText1.getText().toString().equals("")) {
        mText2.setSelected(false);
        mText2.setCursorVisible(false);
        mText1.requestFocus();
        mText1.setSelected(true);
        mText1.setSelection(0);
      }
    }
  }
);
  mText3.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        if (!mConfirmingPassCode) {
          mPassCodeDigits[3]=mText3.getText().toString();
        }
        mText0.requestFocus();
        processFullPassCode();
      }
 else {
        Log_OC.w(TAG,"Input in text box 3 resulted in empty string");
      }
    }
  }
);
  mText3.setOnKeyListener(new OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_DEL && mBChange) {
        mText2.requestFocus();
        if (!mConfirmingPassCode)         mPassCodeDigits[2]="";
        mText2.setText("");
        mBChange=false;
      }
 else       if (!mBChange) {
        mBChange=true;
      }
      return false;
    }
  }
);
  mText3.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      mText3.setCursorVisible(true);
      if (mText0.getText().toString().equals("")) {
        mText3.setSelected(false);
        mText3.setCursorVisible(false);
        mText0.requestFocus();
        mText0.setSelected(true);
        mText0.setSelection(0);
      }
 else       if (mText1.getText().toString().equals("")) {
        mText3.setSelected(false);
        mText3.setCursorVisible(false);
        mText1.requestFocus();
        mText1.setSelected(true);
        mText1.setSelection(0);
      }
 else       if (mText2.getText().toString().equals("")) {
        mText3.setSelected(false);
        mText3.setCursorVisible(false);
        mText2.requestFocus();
        mText2.setSelected(true);
        mText2.setSelection(0);
      }
    }
  }
);
}
