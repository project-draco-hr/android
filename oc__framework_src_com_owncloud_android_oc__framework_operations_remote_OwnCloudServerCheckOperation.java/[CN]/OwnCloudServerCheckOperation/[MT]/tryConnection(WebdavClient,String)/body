{
  boolean retval=false;
  GetMethod get=null;
  try {
    get=new GetMethod(urlSt);
    int status=wc.executeMethod(get,TRY_CONNECTION_TIMEOUT,TRY_CONNECTION_TIMEOUT);
    String response=get.getResponseBodyAsString();
    if (status == HttpStatus.SC_OK) {
      JSONObject json=new JSONObject(response);
      if (!json.getBoolean(NODE_INSTALLED)) {
        mLatestResult=new RemoteOperationResult(RemoteOperationResult.ResultCode.INSTANCE_NOT_CONFIGURED);
      }
 else {
        mOCVersion=new OwnCloudVersion(json.getString(NODE_VERSION));
        mOCVersionString=new OwnCloudVersion(json.getString(NODE_VERSIONSTRING),true);
        if (!mOCVersion.isVersionValid()) {
          mLatestResult=new RemoteOperationResult(RemoteOperationResult.ResultCode.BAD_OC_VERSION);
        }
 else {
          mLatestResult=new RemoteOperationResult(urlSt.startsWith("https://") ? RemoteOperationResult.ResultCode.OK_SSL : RemoteOperationResult.ResultCode.OK_NO_SSL);
          retval=true;
        }
      }
    }
 else {
      mLatestResult=new RemoteOperationResult(false,status,get.getResponseHeaders());
    }
  }
 catch (  JSONException e) {
    mLatestResult=new RemoteOperationResult(RemoteOperationResult.ResultCode.INSTANCE_NOT_CONFIGURED);
  }
catch (  Exception e) {
    mLatestResult=new RemoteOperationResult(e);
  }
 finally {
    if (get != null)     get.releaseConnection();
  }
  if (mLatestResult.isSuccess()) {
    Log.i(TAG,"Connection check at " + urlSt + ": "+ mLatestResult.getLogMessage());
  }
 else   if (mLatestResult.getException() != null) {
    Log.e(TAG,"Connection check at " + urlSt + ": "+ mLatestResult.getLogMessage(),mLatestResult.getException());
  }
 else {
    Log.e(TAG,"Connection check at " + urlSt + ": "+ mLatestResult.getLogMessage());
  }
  return retval;
}
