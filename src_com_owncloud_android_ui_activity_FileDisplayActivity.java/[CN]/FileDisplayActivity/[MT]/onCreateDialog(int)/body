{
  Dialog dialog=null;
  AlertDialog.Builder builder;
switch (id) {
case DIALOG_SETUP_ACCOUNT:
{
      builder=new AlertDialog.Builder(this);
      builder.setTitle(R.string.main_tit_accsetup);
      builder.setMessage(R.string.main_wrn_accsetup);
      builder.setCancelable(false);
      builder.setPositiveButton(android.R.string.ok,new OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          createFirstAccount();
          dialog.dismiss();
        }
      }
);
      builder.setNegativeButton(R.string.common_exit,new OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
          finish();
        }
      }
);
      dialog=builder.create();
      break;
    }
case DIALOG_ABOUT_APP:
{
    builder=new AlertDialog.Builder(this);
    builder.setTitle(getString(R.string.about_title));
    PackageInfo pkg;
    try {
      pkg=getPackageManager().getPackageInfo(getPackageName(),0);
      builder.setMessage(String.format(getString(R.string.about_message),pkg.versionName));
      builder.setIcon(android.R.drawable.ic_menu_info_details);
      dialog=builder.create();
    }
 catch (    NameNotFoundException e) {
      builder=null;
      dialog=null;
      Log.e(TAG,"Error while showing about dialog",e);
    }
    break;
  }
case DIALOG_CREATE_DIR:
{
  builder=new Builder(this);
  final EditText dirNameInput=new EditText(getBaseContext());
  builder.setView(dirNameInput);
  builder.setTitle(R.string.uploader_info_dirname);
  int typed_color=getResources().getColor(R.color.setup_text_typed);
  dirNameInput.setTextColor(typed_color);
  builder.setPositiveButton(android.R.string.ok,new OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      String directoryName=dirNameInput.getText().toString();
      if (directoryName.trim().length() == 0) {
        dialog.cancel();
        return;
      }
      String path;
      if (mCurrentDir == null) {
        if (!mStorageManager.fileExists(OCFile.PATH_SEPARATOR)) {
          OCFile file=new OCFile(OCFile.PATH_SEPARATOR);
          mStorageManager.saveFile(file);
        }
        mCurrentDir=mStorageManager.getFileByPath(OCFile.PATH_SEPARATOR);
      }
      path=FileDisplayActivity.this.mCurrentDir.getRemotePath();
      path+=directoryName + OCFile.PATH_SEPARATOR;
      Thread thread=new Thread(new DirectoryCreator(path,AccountUtils.getCurrentOwnCloudAccount(FileDisplayActivity.this),new Handler()));
      thread.start();
      dialog.dismiss();
      showDialog(DIALOG_SHORT_WAIT);
    }
  }
);
  builder.setNegativeButton(R.string.common_cancel,new OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  dialog=builder.create();
  break;
}
case DIALOG_SHORT_WAIT:
{
ProgressDialog working_dialog=new ProgressDialog(this);
working_dialog.setMessage(getResources().getString(R.string.wait_a_moment));
working_dialog.setIndeterminate(true);
working_dialog.setCancelable(false);
dialog=working_dialog;
break;
}
case DIALOG_CHOOSE_UPLOAD_SOURCE:
{
final String[] items={getString(R.string.actionbar_upload_files),getString(R.string.actionbar_upload_from_apps)};
builder=new AlertDialog.Builder(this);
builder.setTitle(R.string.actionbar_upload);
builder.setItems(items,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
  if (item == 0) {
    Intent action=new Intent(FileDisplayActivity.this,UploadFilesActivity.class);
    action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT,AccountUtils.getCurrentOwnCloudAccount(FileDisplayActivity.this));
    startActivityForResult(action,ACTION_SELECT_MULTIPLE_FILES);
  }
 else   if (item == 1) {
    Intent action=new Intent(Intent.ACTION_GET_CONTENT);
    action=action.setType("*/*").addCategory(Intent.CATEGORY_OPENABLE);
    startActivityForResult(Intent.createChooser(action,getString(R.string.upload_chooser_title)),ACTION_SELECT_CONTENT_FROM_APPS);
  }
}
}
);
dialog=builder.create();
break;
}
case DIALOG_SSL_VALIDATOR:
{
dialog=SslValidatorDialog.newInstance(this,mLastSslUntrustedServerResult,this);
break;
}
case DIALOG_CERT_NOT_SAVED:
{
builder=new AlertDialog.Builder(this);
builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved));
builder.setCancelable(false);
builder.setPositiveButton(R.string.common_ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
dialog.dismiss();
}
}
);
dialog=builder.create();
break;
}
default :
dialog=null;
}
return dialog;
}
