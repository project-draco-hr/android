def _auto_local(path_to_tx, resource, source_language, expression, execute=False, source_file=None, regex=False):
    'Auto configure local project.'
    curpath = os.path.abspath(os.curdir)
    expr_re = utils.regex_from_filefilter(expression, curpath)
    expr_rec = re.compile(expr_re)
    if (not execute):
        logger.info('Only printing the commands which will be run if the --execute switch is specified.')
    translation_files = {}
    for (root, dirs, files) in os.walk(curpath):
        for f in files:
            f_path = os.path.abspath(os.path.join(root, f))
            match = expr_rec.match(f_path)
            if match:
                lang = match.group(1)
                f_path = os.path.abspath(f_path)
                if ((lang == source_language) and (not source_file)):
                    source_file = f_path
                else:
                    translation_files[lang] = f_path
    if (not source_file):
        raise Exception('Could not find a source language file. Please run set --source manually and then re-run this command or provide the source file with the -s flag.')
    if execute:
        logger.info(('Updating source for resource %s ( %s -> %s ).' % (resource, source_language, relpath(source_file, path_to_tx))))
        _set_source_file(path_to_tx, resource, source_language, relpath(source_file, path_to_tx))
    else:
        logger.info(('\ntx set --source -r %(res)s -l %(lang)s %(file)s\n' % {'res': resource, 'lang': source_language, 'file': relpath(source_file, curpath), }))
    prj = project.Project(path_to_tx)
    root_dir = os.path.abspath(path_to_tx)
    if execute:
        try:
            prj.config.get(('%s' % resource), 'source_file')
        except ConfigParser.NoSectionError:
            raise Exception(('No resource with slug "%s" was found.\nRun \'tx set --auto-local -r %s "expression"\' to do the initial configuration.' % resource))
    if execute:
        logger.info(('Updating file expression for resource %s ( %s ).' % (resource, expression)))
        file_filter = relpath(os.path.join(curpath, expression), path_to_tx)
        prj.config.set(('%s' % resource), 'file_filter', file_filter)
    else:
        for (lang, f_path) in sorted(translation_files.items()):
            logger.info(('tx set -r %(res)s -l %(lang)s %(file)s' % {'res': resource, 'lang': lang, 'file': relpath(f_path, curpath), }))
    if execute:
        prj.save()
