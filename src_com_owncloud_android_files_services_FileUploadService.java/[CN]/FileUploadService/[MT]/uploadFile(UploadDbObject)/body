{
  if (uploadDbObject.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED) {
    Log_OC.w(TAG,"Already succeeded uploadObject was again scheduled for upload. Fix that!");
    return false;
  }
  if (mCurrentUpload != null) {
    Log_OC.e(TAG,"mCurrentUpload != null. Meaning there is another upload in progress, cannot start a new one. Fix that!");
    return false;
  }
  if (uploadDbObject.isUseWifiOnly() && !InstantUploadBroadcastReceiver.isConnectedViaWiFi(getApplicationContext())) {
    Log_OC.d(TAG,"Do not start upload because it is wifi-only.");
    return false;
  }
  if (!new File(uploadDbObject.getLocalPath()).exists()) {
    mDb.updateUpload(uploadDbObject.getLocalPath(),UploadStatus.UPLOAD_FAILED_GIVE_UP,new RemoteOperationResult(ResultCode.FILE_NOT_FOUND));
    Log_OC.d(TAG,"Do not start upload because local file does not exist.");
    return false;
  }
  AccountManager aMgr=AccountManager.get(this);
  Account account=uploadDbObject.getAccount(getApplicationContext());
  String version=aMgr.getUserData(account,Constants.KEY_OC_VERSION);
  OwnCloudVersion ocv=new OwnCloudVersion(version);
  boolean chunked=FileUploadService.chunkedUploadIsSupported(ocv);
  String uploadKey=null;
  uploadKey=buildRemoteName(account,uploadDbObject.getRemotePath());
  OCFile file=obtainNewOCFileToUpload(uploadDbObject.getRemotePath(),uploadDbObject.getLocalPath(),uploadDbObject.getMimeType());
  mCurrentUpload=new UploadFileOperation(account,file,chunked,uploadDbObject.isForceOverwrite(),uploadDbObject.getLocalAction(),getApplicationContext());
  if (uploadDbObject.isCreateRemoteFolder()) {
    mCurrentUpload.setRemoteFolderToBeCreated();
  }
  mCurrentUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);
  notifyUploadStart(mCurrentUpload);
  RemoteOperationResult uploadResult=null, grantResult=null;
  try {
    if (mUploadClient == null || !mLastAccount.equals(mCurrentUpload.getAccount())) {
      mLastAccount=mCurrentUpload.getAccount();
      mStorageManager=new FileDataStorageManager(mLastAccount,getContentResolver());
      OwnCloudAccount ocAccount=new OwnCloudAccount(mLastAccount,this);
      mUploadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);
    }
    String remoteParentPath=new File(mCurrentUpload.getRemotePath()).getParent();
    remoteParentPath=remoteParentPath.endsWith(OCFile.PATH_SEPARATOR) ? remoteParentPath : remoteParentPath + OCFile.PATH_SEPARATOR;
    grantResult=grantFolderExistence(mCurrentUpload,remoteParentPath);
    if (grantResult.isSuccess()) {
      OCFile parent=mStorageManager.getFileByPath(remoteParentPath);
      mCurrentUpload.getFile().setParentId(parent.getFileId());
      uploadResult=mCurrentUpload.execute(mUploadClient);
      if (uploadResult.isSuccess()) {
        saveUploadedFile(mCurrentUpload);
      }
    }
 else {
      uploadResult=grantResult;
    }
  }
 catch (  AccountsException e) {
    Log_OC.e(TAG,"Error while trying to get autorization for " + mLastAccount.name,e);
    uploadResult=new RemoteOperationResult(e);
  }
catch (  IOException e) {
    Log_OC.e(TAG,"Error while trying to get autorization for " + mLastAccount.name,e);
    uploadResult=new RemoteOperationResult(e);
  }
 finally {
    mPendingUploads.remove(buildRemoteName(uploadDbObject));
    Log_OC.i(TAG,"Remove CurrentUploadItem from pending upload Item Map.");
    if (uploadResult.isException()) {
      mUploadClient=null;
    }
  }
  notifyUploadResult(uploadResult,mCurrentUpload);
  sendFinalBroadcast(mCurrentUpload,uploadResult);
  mCurrentUpload=null;
  return uploadResult.isSuccess();
}
