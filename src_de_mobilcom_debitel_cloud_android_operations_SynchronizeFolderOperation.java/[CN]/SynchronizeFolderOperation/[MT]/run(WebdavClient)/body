{
  RemoteOperationResult result=null;
  mFailsInFavouritesFound=0;
  mConflictsFound=0;
  mForgottenLocalFiles.clear();
  PropFindMethod query=null;
  try {
    Log_OC.d(TAG,"Synchronizing " + mAccount.name + ", fetching files in "+ mRemotePath);
    query=new PropFindMethod(client.getBaseUri() + WebdavUtils.encodePath(mRemotePath),DavConstants.PROPFIND_ALL_PROP,DavConstants.DEPTH_1);
    int status=client.executeMethod(query);
    if (isMultiStatus(status)) {
      MultiStatus resp=query.getResponseBodyAsMultiStatus();
      if (mParentId == DataStorageManager.ROOT_PARENT_ID) {
        WebdavEntry we=new WebdavEntry(resp.getResponses()[0],client.getBaseUri().getPath());
        OCFile parent=fillOCFile(we);
        mStorageManager.saveFile(parent);
        mParentId=parent.getFileId();
      }
      List<OCFile> updatedFiles=new Vector<OCFile>(resp.getResponses().length - 1);
      List<SynchronizeFileOperation> filesToSyncContents=new Vector<SynchronizeFileOperation>();
      for (int i=1; i < resp.getResponses().length; ++i) {
        WebdavEntry we=new WebdavEntry(resp.getResponses()[i],client.getBaseUri().getPath());
        OCFile file=fillOCFile(we);
        file.setLastSyncDateForProperties(mCurrentSyncTime);
        OCFile oldFile=mStorageManager.getFileByPath(file.getRemotePath());
        if (oldFile != null) {
          file.setKeepInSync(oldFile.keepInSync());
          file.setLastSyncDateForData(oldFile.getLastSyncDateForData());
          file.setModificationTimestampAtLastSyncForData(oldFile.getModificationTimestampAtLastSyncForData());
          checkAndFixForeignStoragePath(oldFile);
          file.setStoragePath(oldFile.getStoragePath());
        }
        if (file.getStoragePath() == null && !file.isDirectory()) {
          File f=new File(FileStorageUtils.getDefaultSavePathFor(mAccount.name,file));
          if (f.exists()) {
            file.setStoragePath(f.getAbsolutePath());
            file.setLastSyncDateForData(f.lastModified());
          }
        }
        if (file.keepInSync()) {
          SynchronizeFileOperation operation=new SynchronizeFileOperation(oldFile,file,mStorageManager,mAccount,true,false,mContext);
          filesToSyncContents.add(operation);
        }
        updatedFiles.add(file);
      }
      mStorageManager.saveFiles(updatedFiles);
      SynchronizeFileOperation op=null;
      RemoteOperationResult contentsResult=null;
      for (int i=0; i < filesToSyncContents.size(); i++) {
        op=filesToSyncContents.get(i);
        contentsResult=op.execute(client);
        if (!contentsResult.isSuccess()) {
          if (contentsResult.getCode() == ResultCode.SYNC_CONFLICT) {
            mConflictsFound++;
          }
 else {
            mFailsInFavouritesFound++;
            if (contentsResult.getException() != null) {
              Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage(),contentsResult.getException());
            }
 else {
              Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage());
            }
          }
        }
      }
      mChildren=mStorageManager.getDirectoryContent(mStorageManager.getFileById(mParentId));
      OCFile file;
      String currentSavePath=FileStorageUtils.getSavePath(mAccount.name);
      for (int i=0; i < mChildren.size(); ) {
        file=mChildren.get(i);
        if (file.getLastSyncDateForProperties() != mCurrentSyncTime) {
          Log_OC.d(TAG,"removing file: " + file);
          mStorageManager.removeFile(file,(file.isDown() && file.getStoragePath().startsWith(currentSavePath)));
          mChildren.remove(i);
        }
 else {
          i++;
        }
      }
    }
 else {
      client.exhaustResponse(query.getResponseBodyAsStream());
    }
    if (isMultiStatus(status)) {
      if (mConflictsFound > 0 || mFailsInFavouritesFound > 0) {
        result=new RemoteOperationResult(ResultCode.SYNC_CONFLICT);
      }
 else {
        result=new RemoteOperationResult(true,status,query.getResponseHeaders());
      }
    }
 else {
      result=new RemoteOperationResult(false,status,query.getResponseHeaders());
    }
  }
 catch (  Exception e) {
    result=new RemoteOperationResult(e);
  }
 finally {
    if (query != null)     query.releaseConnection();
    if (result.isSuccess()) {
      Log_OC.i(TAG,"Synchronizing " + mAccount.name + ", folder "+ mRemotePath+ ": "+ result.getLogMessage());
    }
 else {
      if (result.isException()) {
        Log_OC.e(TAG,"Synchronizing " + mAccount.name + ", folder "+ mRemotePath+ ": "+ result.getLogMessage(),result.getException());
      }
 else {
        Log_OC.e(TAG,"Synchronizing " + mAccount.name + ", folder "+ mRemotePath+ ": "+ result.getLogMessage());
      }
    }
  }
  return result;
}
