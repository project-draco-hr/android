{
  int numFiles=0;
  if (params != null && params.length == 3) {
    Account account=(Account)params[0];
    Uri[] uris=(Uri[])params[1];
    String[] remotePaths=(String[])params[2];
    InputStream inputStream=null;
    FileOutputStream outputStream=null;
    String fullTempPath=null;
    Uri actualUri=null;
    String actualRemotePath=null;
    ContentResolver contentResolver=mContext.getContentResolver();
    try {
      for (int i=0; i < uris.length; i++) {
        actualUri=uris[i];
        actualRemotePath=remotePaths[i];
        fullTempPath=FileStorageUtils.getTemporalPath(account.name) + actualRemotePath;
        inputStream=contentResolver.openInputStream(actualUri);
        File cacheFile=new File(fullTempPath);
        File tempDir=cacheFile.getParentFile();
        if (!tempDir.exists()) {
          tempDir.mkdirs();
        }
        cacheFile.createNewFile();
        outputStream=new FileOutputStream(fullTempPath);
        byte[] buffer=new byte[4096];
        int count=0;
        while ((count=inputStream.read(buffer)) > 0) {
          outputStream.write(buffer,0,count);
        }
        requestUpload(account,fullTempPath,actualRemotePath,contentResolver.getType(actualUri));
        numFiles++;
      }
    }
 catch (    Exception e) {
      Log_OC.e(TAG,"Exception while copying " + actualUri.toString() + " to temporary file",e);
      if (fullTempPath != null) {
        File f=new File(fullTempPath);
        if (f.exists()) {
          if (!f.delete()) {
            Log_OC.e(TAG,"Could not delete temporary file " + fullTempPath);
          }
        }
      }
    }
 finally {
      if (inputStream != null) {
        try {
          inputStream.close();
        }
 catch (        Exception e) {
          Log_OC.w(TAG,"Ignoring exception of inputStream closure");
        }
      }
      if (outputStream != null) {
        try {
          outputStream.close();
        }
 catch (        Exception e) {
          Log_OC.w(TAG,"Ignoring exception of outStream closure");
        }
      }
    }
  }
 else {
    throw new IllegalArgumentException("Error in parameters number");
  }
  return numFiles;
}
