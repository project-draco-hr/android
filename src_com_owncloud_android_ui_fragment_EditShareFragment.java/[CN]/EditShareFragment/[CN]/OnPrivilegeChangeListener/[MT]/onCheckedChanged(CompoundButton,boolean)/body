{
  if (!isResumed()) {
    return;
  }
  CheckBox subordinate;
switch (checkBoxView.getId()) {
case R.id.canShareCheckBox:
    Log_OC.v(TAG,"canShareCheckBox toggled to " + isChecked);
  break;
case R.id.canEditCheckBox:
Log_OC.v(TAG,"canEditCheckBox toggled to " + isChecked);
if (mFile.isFolder()) {
if (isChecked) {
  for (int i=0; i < sSubordinateCheckBoxIds.length; i++) {
    subordinate=(CheckBox)getView().findViewById(sSubordinateCheckBoxIds[i]);
    subordinate.setVisibility(View.VISIBLE);
    if (!subordinate.isChecked()) {
      toggleDisablingListener(subordinate);
    }
  }
}
 else {
  for (int i=0; i < sSubordinateCheckBoxIds.length; i++) {
    subordinate=(CheckBox)getView().findViewById(sSubordinateCheckBoxIds[i]);
    subordinate.setVisibility(View.GONE);
    if (subordinate.isChecked()) {
      toggleDisablingListener(subordinate);
    }
  }
}
}
break;
case R.id.canEditCreateCheckBox:
Log_OC.v(TAG,"canEditCreateCheckBox toggled to " + isChecked);
syncCanEditCheckBox(checkBoxView,isChecked);
break;
case R.id.canEditChangeCheckBox:
Log_OC.v(TAG,"canEditChangeCheckBox toggled to " + isChecked);
syncCanEditCheckBox(checkBoxView,isChecked);
break;
case R.id.canEditDeleteCheckBox:
Log_OC.v(TAG,"canEditDeleteCheckBox toggled to " + isChecked);
syncCanEditCheckBox(checkBoxView,isChecked);
break;
}
}
