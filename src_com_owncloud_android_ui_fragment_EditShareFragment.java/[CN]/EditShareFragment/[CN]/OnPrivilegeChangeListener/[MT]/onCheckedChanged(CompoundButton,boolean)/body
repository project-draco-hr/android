{
  if (!isResumed()) {
    return;
  }
  CompoundButton subordinate;
switch (compound.getId()) {
case R.id.canShareSwitch:
    Log_OC.v(TAG,"canShareCheckBox toggled to " + isChecked);
  updatePermissionsToShare();
break;
case R.id.canEditSwitch:
Log_OC.v(TAG,"canEditCheckBox toggled to " + isChecked);
boolean isFederated=ShareType.FEDERATED.equals(mShare.getShareType());
if (mFile.isFolder()) {
if (isChecked) {
for (int i=0; i < sSubordinateCheckBoxIds.length; i++) {
subordinate=(CompoundButton)getView().findViewById(sSubordinateCheckBoxIds[i]);
if (!isFederated) {
  subordinate.setVisibility(View.VISIBLE);
}
if (!subordinate.isChecked() && !mFile.isSharedWithMe()) {
  toggleDisablingListener(subordinate);
}
}
}
 else {
for (int i=0; i < sSubordinateCheckBoxIds.length; i++) {
subordinate=(CompoundButton)getView().findViewById(sSubordinateCheckBoxIds[i]);
subordinate.setVisibility(View.GONE);
if (subordinate.isChecked()) {
  toggleDisablingListener(subordinate);
}
}
}
}
if (!(mFile.isFolder() && isChecked && mFile.isSharedWithMe())) {
updatePermissionsToShare();
}
break;
case R.id.canEditCreateCheckBox:
Log_OC.v(TAG,"canEditCreateCheckBox toggled to " + isChecked);
syncCanEditSwitch(compound,isChecked);
updatePermissionsToShare();
break;
case R.id.canEditChangeCheckBox:
Log_OC.v(TAG,"canEditChangeCheckBox toggled to " + isChecked);
syncCanEditSwitch(compound,isChecked);
updatePermissionsToShare();
break;
case R.id.canEditDeleteCheckBox:
Log_OC.v(TAG,"canEditDeleteCheckBox toggled to " + isChecked);
syncCanEditSwitch(compound,isChecked);
updatePermissionsToShare();
break;
}
}
