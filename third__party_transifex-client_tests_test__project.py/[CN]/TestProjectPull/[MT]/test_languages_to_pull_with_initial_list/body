def test_languages_to_pull_with_initial_list(self):
    'Test determining the languages to pull, then there is a\n        language selection from the user.\n        '
    languages = ['el', 'en']
    self.lang_map['el'] = 'el-gr'
    del self.files['el']
    self.files['el-gr'] = None
    force = False
    with patch.object(self.p, '_should_add_translation') as mock:
        mock.return_value = True
        res = self.p._languages_to_pull(languages, self.files, self.lang_map, self.stats, force)
        existing = res[0]
        new = res[1]
        self.assertEquals(existing, set(['en', 'el-gr']))
        self.assertFalse(new)
        mock.return_value = False
        res = self.p._languages_to_pull(languages, self.files, self.lang_map, self.stats, force)
        existing = res[0]
        new = res[1]
        self.assertEquals(existing, set(['en', 'el-gr']))
        self.assertFalse(new)
        del self.files['el-gr']
        mock.return_value = True
        res = self.p._languages_to_pull(languages, self.files, self.lang_map, self.stats, force)
        existing = res[0]
        new = res[1]
        self.assertEquals(existing, set(['en']))
        self.assertEquals(new, set(['el']))
        mock.return_value = False
        res = self.p._languages_to_pull(languages, self.files, self.lang_map, self.stats, force)
        existing = res[0]
        new = res[1]
        self.assertEquals(existing, set(['en']))
        self.assertEquals(new, set([]))
