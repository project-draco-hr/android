def test_push_translation(self):
    'Test filters for pushing a translation file.'
    with patch.object(self.p, 'get_resource_option') as mock:
        mock.return_value = None
        local_file = 'foo'
        should_push = self.p._should_push_translation
        force = True
        for lang in self.langs:
            self.assertTrue(should_push(lang, self.stats, local_file, force))
        force = False
        self.assertTrue(should_push('es', self.stats, local_file))
        local_times = [self.p._generate_timestamp('2011-11-01 14:00:59')]
        results = itertools.cycle(local_times)

        def side_effect(*args):
            return results.next()
        with patch.object(self.p, '_get_time_of_local_file') as time_mock:
            time_mock.side_effect = side_effect
            with patch.object(self.p, 'get_full_path') as path_mock:
                path_mock.return_value = 'foo'
                for lang in self.langs:
                    self.assertFalse(should_push(lang, self.stats, local_file))
        local_times = [self.p._generate_timestamp('2011-11-01 15:01:59')]
        results = itertools.cycle(local_times)

        def side_effect(*args):
            return results.next()
        with patch.object(self.p, '_get_time_of_local_file') as time_mock:
            time_mock.side_effect = side_effect
            with patch.object(self.p, 'get_full_path') as path_mock:
                path_mock.return_value = 'foo'
                for lang in self.langs:
                    self.assertTrue(should_push(lang, self.stats, local_file))
