{
  View view=convertView;
  if (view == null) {
    LayoutInflater inflator=(LayoutInflater)mParentActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflator.inflate(R.layout.upload_list_item,null);
  }
  if (uploadsItems != null && uploadsItems.length > position) {
    final OCUpload upload=uploadsItems[position];
    final OCFile uploadOCFile=upload.getOCFile();
    TextView fileTextView=(TextView)view.findViewById(R.id.upload_name);
    String fileName=uploadOCFile.getFileName();
    fileTextView.setText(fileName);
    TextView pathTextView=(TextView)view.findViewById(R.id.upload_local_path);
    String path=uploadOCFile.getRemotePath();
    path=(path == null || path.isEmpty()) ? "" : path.substring(0,path.length() - fileName.length() - 1);
    pathTextView.setText(mParentActivity.getString(R.string.app_name) + path);
    TextView fileSizeTextView=(TextView)view.findViewById(R.id.upload_file_size);
    fileSizeTextView.setText(DisplayUtils.bytesToHumanReadable(uploadOCFile.getFileLength()) + ", ");
    TextView uploadDateTextView=(TextView)view.findViewById(R.id.upload_date);
    CharSequence dateString=DisplayUtils.getRelativeDateTimeString(mParentActivity,uploadOCFile.getModificationTimestamp(),DateUtils.SECOND_IN_MILLIS,DateUtils.WEEK_IN_MILLIS,0);
    uploadDateTextView.setText(dateString);
    TextView accountNameTextView=(TextView)view.findViewById(R.id.upload_account);
    accountNameTextView.setText(upload.getAccountName());
    TextView statusTextView=(TextView)view.findViewById(R.id.upload_status);
    String status;
    uploadDateTextView.setVisibility(View.VISIBLE);
    pathTextView.setVisibility(View.VISIBLE);
    fileSizeTextView.setVisibility(View.VISIBLE);
    accountNameTextView.setVisibility(View.VISIBLE);
    statusTextView.setVisibility(View.VISIBLE);
switch (upload.getUploadStatus()) {
case UPLOAD_IN_PROGRESS:
      status=mParentActivity.getString(R.string.uploader_upload_in_progress_ticker);
    ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.upload_progress_bar);
  progressBar.setProgress(0);
progressBar.setVisibility(View.VISIBLE);
mProgressListener=new ProgressListener(progressBar);
if (mParentActivity.getFileUploaderBinder() != null) {
mParentActivity.getFileUploaderBinder().addDatatransferProgressListener(mProgressListener,mParentActivity.getAccount(),uploadOCFile,upload.getUploadId());
}
 else {
Log_OC.e(TAG,"UploadBinder == null. It should have been created on creating mParentActivity" + " which inherits from FileActivity. Fix that!");
Log_OC.e(TAG,"PENDING BINDING for upload = " + upload.getLocalPath());
}
uploadDateTextView.setVisibility(View.GONE);
pathTextView.setVisibility(View.GONE);
fileSizeTextView.setVisibility(View.GONE);
accountNameTextView.setVisibility(View.INVISIBLE);
break;
case UPLOAD_FAILED_GIVE_UP:
uploadDateTextView.setVisibility(View.GONE);
if (upload.getLastResult() != null) {
switch (upload.getLastResult()) {
case CREDENTIAL_ERROR:
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_credentials_error);
view.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
Intent updateAccountCredentials=new Intent(mParentActivity,AuthenticatorActivity.class);
updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,upload.getAccount(mParentActivity));
updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);
updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);
mParentActivity.startActivity(updateAccountCredentials);
}
}
);
break;
case FOLDER_ERROR:
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_folder_error);
break;
case FILE_ERROR:
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_file_error);
break;
case PRIVILEDGES_ERROR:
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_permission_error);
break;
default :
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed) + ": " + upload.getLastResult().toString();
break;
}
}
 else {
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed);
;
}
break;
case UPLOAD_FAILED_RETRY:
if (upload.getLastResult() == UploadResult.NETWORK_CONNECTION) {
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_connection_error);
}
 else {
status=mParentActivity.getString(R.string.uploads_view_upload_status_failed_retry);
}
String laterReason=FileUploadService.getUploadLaterReason(mParentActivity,upload);
if (laterReason != null) {
status=laterReason;
}
pathTextView.setVisibility(View.GONE);
fileSizeTextView.setVisibility(View.GONE);
accountNameTextView.setVisibility(View.INVISIBLE);
uploadDateTextView.setVisibility(View.GONE);
break;
case UPLOAD_LATER:
uploadDateTextView.setVisibility(View.GONE);
pathTextView.setVisibility(View.GONE);
fileSizeTextView.setVisibility(View.GONE);
accountNameTextView.setVisibility(View.INVISIBLE);
status=FileUploadService.getUploadLaterReason(mParentActivity,upload);
break;
case UPLOAD_SUCCEEDED:
status=mParentActivity.getString(R.string.uploads_view_upload_status_succeeded);
statusTextView.setVisibility(View.GONE);
break;
case UPLOAD_CANCELLED:
status=mParentActivity.getString(R.string.uploads_view_upload_status_cancelled);
break;
case UPLOAD_PAUSED:
status=mParentActivity.getString(R.string.uploads_view_upload_status_paused);
break;
default :
status=upload.getUploadStatus().toString();
if (upload.getLastResult() != null) {
upload.getLastResult().toString();
}
break;
}
if (upload.getUploadStatus() != UploadStatus.UPLOAD_IN_PROGRESS) {
ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.upload_progress_bar);
progressBar.setVisibility(View.GONE);
if (mParentActivity.getFileUploaderBinder() != null && mProgressListener != null && mCurrentUpload != null) {
OCFile currentOcFile=mCurrentUpload.getFile();
mParentActivity.getFileUploaderBinder().removeDatatransferProgressListener(mProgressListener,upload.getAccount(mParentActivity),currentOcFile,upload.getUploadId());
mProgressListener=null;
mCurrentUpload=null;
}
}
statusTextView.setText(status);
ImageButton rightButton=(ImageButton)view.findViewById(R.id.upload_right_button);
if (upload.userCanRetryUpload() && upload.getUploadStatus() != UploadStatus.UPLOAD_SUCCEEDED) {
rightButton.setImageResource(R.drawable.ic_refresh);
rightButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mParentActivity.getFileOperationsHelper().retryUpload(upload);
}
}
);
}
 else if (upload.userCanCancelUpload()) {
rightButton.setImageResource(R.drawable.ic_cancel);
rightButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mParentActivity.getFileOperationsHelper().cancelTransference(uploadOCFile);
}
}
);
}
 else {
rightButton.setImageResource(R.drawable.ic_delete);
rightButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mParentActivity.getFileOperationsHelper().removeUploadFromList(upload);
}
}
);
}
ImageView fileIcon=(ImageView)view.findViewById(R.id.thumbnail);
fileIcon.setImageResource(R.drawable.file);
boolean allowedToCreateNewThumbnail=(ThumbnailsCacheManager.cancelPotentialWork(uploadOCFile,fileIcon));
if ((uploadOCFile.isImage() && uploadOCFile.getRemoteId() != null && upload.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED)) {
Bitmap thumbnail=ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(uploadOCFile.getRemoteId()));
if (thumbnail != null && !uploadOCFile.needsUpdateThumbnail()) {
fileIcon.setImageBitmap(thumbnail);
}
 else {
if (allowedToCreateNewThumbnail) {
final ThumbnailsCacheManager.ThumbnailGenerationTask task=new ThumbnailsCacheManager.ThumbnailGenerationTask(fileIcon,mParentActivity.getStorageManager(),mParentActivity.getAccount());
if (thumbnail == null) {
thumbnail=ThumbnailsCacheManager.mDefaultImg;
}
final ThumbnailsCacheManager.AsyncDrawable asyncDrawable=new ThumbnailsCacheManager.AsyncDrawable(mParentActivity.getResources(),thumbnail,task);
fileIcon.setImageDrawable(asyncDrawable);
task.execute(uploadOCFile);
}
}
if (uploadOCFile.getMimetype().equalsIgnoreCase("image/png")) {
fileIcon.setBackgroundColor(mParentActivity.getResources().getColor(R.color.background_color));
}
}
 else if (uploadOCFile.isImage() && uploadOCFile.getStoragePath() != null) {
File file=new File(uploadOCFile.getStoragePath());
Bitmap thumbnail=ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(file.hashCode()));
if (thumbnail != null) {
fileIcon.setImageBitmap(thumbnail);
}
 else {
if (allowedToCreateNewThumbnail) {
final ThumbnailsCacheManager.ThumbnailGenerationTask task=new ThumbnailsCacheManager.ThumbnailGenerationTask(fileIcon);
if (thumbnail == null) {
thumbnail=ThumbnailsCacheManager.mDefaultImg;
}
final ThumbnailsCacheManager.AsyncDrawable asyncDrawable=new ThumbnailsCacheManager.AsyncDrawable(mParentActivity.getResources(),thumbnail,task);
fileIcon.setImageDrawable(asyncDrawable);
task.execute(file);
Log_OC.v(TAG,"Executing task to generate a new thumbnail");
}
}
if (uploadOCFile.getMimetype().equalsIgnoreCase("image/png")) {
fileIcon.setBackgroundColor(mParentActivity.getResources().getColor(R.color.background_color));
}
}
 else {
fileIcon.setImageResource(MimetypeIconUtil.getFileTypeIconId(upload.getMimeType(),uploadOCFile.getFileName()));
}
}
return view;
}
