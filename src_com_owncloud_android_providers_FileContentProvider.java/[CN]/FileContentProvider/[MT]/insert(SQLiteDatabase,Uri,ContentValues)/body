{
switch (mUriMatcher.match(uri)) {
case ROOT_DIRECTORY:
case SINGLE_FILE:
    String remotePath=values.getAsString(ProviderTableMeta.FILE_PATH);
  String accountName=values.getAsString(ProviderTableMeta.FILE_ACCOUNT_OWNER);
String[] projection=new String[]{ProviderTableMeta._ID,ProviderTableMeta.FILE_PATH,ProviderTableMeta.FILE_ACCOUNT_OWNER};
String where=ProviderTableMeta.FILE_PATH + "=? AND " + ProviderTableMeta.FILE_ACCOUNT_OWNER+ "=?";
String[] whereArgs=new String[]{remotePath,accountName};
Cursor doubleCheck=query(db,uri,projection,where,whereArgs,null);
if (doubleCheck == null || !doubleCheck.moveToFirst()) {
if (doubleCheck != null) {
doubleCheck.close();
}
long rowId=db.insert(ProviderTableMeta.FILE_TABLE_NAME,null,values);
if (rowId > 0) {
return ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_FILE,rowId);
}
 else {
throw new SQLException("ERROR " + uri);
}
}
 else {
Uri insertedFileUri=ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_FILE,doubleCheck.getLong(doubleCheck.getColumnIndex(ProviderTableMeta._ID)));
doubleCheck.close();
return insertedFileUri;
}
case SHARES:
Uri insertedShareUri=null;
long rowId=db.insert(ProviderTableMeta.OCSHARES_TABLE_NAME,null,values);
if (rowId > 0) {
insertedShareUri=ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_SHARE,rowId);
}
 else {
throw new SQLException("ERROR " + uri);
}
updateFilesTableAccordingToShareInsertion(db,values);
return insertedShareUri;
case CAPABILITIES:
Uri insertedCapUri=null;
long id=db.insert(ProviderTableMeta.CAPABILITIES_TABLE_NAME,null,values);
if (id > 0) {
insertedCapUri=ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_CAPABILITIES,id);
}
 else {
throw new SQLException("ERROR " + uri);
}
return insertedCapUri;
default :
throw new IllegalArgumentException("Unknown uri id: " + uri);
}
}
