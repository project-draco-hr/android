{
  RemoteOperationResult result=null;
  boolean localCopyPassed=false, nameCheckPassed=false;
  File temporalFile=null, originalFile=new File(mOriginalStoragePath), expectedFile=null;
  try {
    if (!mForceOverwrite) {
      String remotePath=getAvailableRemotePath(client,mRemotePath);
      mWasRenamed=!remotePath.equals(mRemotePath);
      if (mWasRenamed) {
        createNewOCFile(remotePath);
      }
    }
    nameCheckPassed=true;
    String expectedPath=FileStorageUtils.getDefaultSavePathFor(mAccount.name,mFile);
    expectedFile=new File(expectedPath);
    if (!mOriginalStoragePath.equals(expectedPath) && mLocalBehaviour == FileUploader.LOCAL_BEHAVIOUR_COPY) {
      if (FileStorageUtils.getUsableSpace(mAccount.name) < originalFile.length()) {
        result=new RemoteOperationResult(ResultCode.LOCAL_STORAGE_FULL);
        return result;
      }
 else {
        String temporalPath=FileStorageUtils.getTemporalPath(mAccount.name) + mFile.getRemotePath();
        mFile.setStoragePath(temporalPath);
        temporalFile=new File(temporalPath);
        File temporalParent=temporalFile.getParentFile();
        temporalParent.mkdirs();
        if (!temporalParent.isDirectory()) {
          throw new IOException("Unexpected error: parent directory could not be created");
        }
        temporalFile.createNewFile();
        if (!temporalFile.isFile()) {
          throw new IOException("Unexpected error: target file could not be created");
        }
        InputStream in=null;
        OutputStream out=null;
        try {
          if (mOriginalStoragePath.startsWith(UriUtils.URI_CONTENT_SCHEME)) {
            Uri uri=Uri.parse(mOriginalStoragePath);
            in=MainApp.getAppContext().getContentResolver().openInputStream(uri);
            out=new FileOutputStream(temporalFile);
            int nRead;
            byte[] data=new byte[16384];
            while ((nRead=in.read(data,0,data.length)) != -1) {
              out.write(data,0,nRead);
            }
            out.flush();
          }
 else {
            if (!mOriginalStoragePath.equals(temporalPath)) {
              in=new FileInputStream(originalFile);
              out=new FileOutputStream(temporalFile);
              byte[] buf=new byte[1024];
              int len;
              while ((len=in.read(buf)) > 0) {
                out.write(buf,0,len);
              }
            }
          }
        }
 catch (        Exception e) {
          result=new RemoteOperationResult(ResultCode.LOCAL_STORAGE_NOT_COPIED);
          return result;
        }
 finally {
          try {
            if (in != null)             in.close();
          }
 catch (          Exception e) {
            Log_OC.d(TAG,"Weird exception while closing input stream for " + mOriginalStoragePath + " (ignoring)",e);
          }
          try {
            if (out != null)             out.close();
          }
 catch (          Exception e) {
            Log_OC.d(TAG,"Weird exception while closing output stream for " + expectedPath + " (ignoring)",e);
          }
        }
      }
    }
    localCopyPassed=true;
    if (mChunked && (new File(mFile.getStoragePath())).length() > ChunkedUploadRemoteFileOperation.CHUNK_SIZE) {
      mUploadOperation=new ChunkedUploadRemoteFileOperation(mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype());
    }
 else {
      mUploadOperation=new UploadRemoteFileOperation(mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype());
    }
    Iterator<OnDatatransferProgressListener> listener=mDataTransferListeners.iterator();
    while (listener.hasNext()) {
      mUploadOperation.addDatatransferProgressListener(listener.next());
    }
    result=mUploadOperation.execute(client);
    if (result.isSuccess()) {
      if (mLocalBehaviour == FileUploader.LOCAL_BEHAVIOUR_FORGET) {
        mFile.setStoragePath(null);
      }
 else {
        mFile.setStoragePath(expectedPath);
        File fileToMove=null;
        if (temporalFile != null) {
          fileToMove=temporalFile;
        }
 else {
          fileToMove=originalFile;
        }
        if (!expectedFile.equals(fileToMove)) {
          File expectedFolder=expectedFile.getParentFile();
          expectedFolder.mkdirs();
          if (!expectedFolder.isDirectory() || !fileToMove.renameTo(expectedFile)) {
            mFile.setStoragePath(null);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    if (mCancellationRequested.get()) {
      result=new RemoteOperationResult(new OperationCancelledException());
    }
 else {
      result=new RemoteOperationResult(e);
    }
  }
 finally {
    if (temporalFile != null && !originalFile.equals(temporalFile)) {
      temporalFile.delete();
    }
    if (result.isSuccess()) {
      Log_OC.i(TAG,"Upload of " + mOriginalStoragePath + " to "+ mRemotePath+ ": "+ result.getLogMessage());
    }
 else {
      if (result.getException() != null) {
        String complement="";
        if (!nameCheckPassed) {
          complement=" (while checking file existence in server)";
        }
 else         if (!localCopyPassed) {
          complement=" (while copying local file to " + FileStorageUtils.getSavePath(mAccount.name) + ")";
        }
        Log_OC.e(TAG,"Upload of " + mOriginalStoragePath + " to "+ mRemotePath+ ": "+ result.getLogMessage()+ complement,result.getException());
      }
 else {
        Log_OC.e(TAG,"Upload of " + mOriginalStoragePath + " to "+ mRemotePath+ ": "+ result.getLogMessage());
      }
    }
  }
  return result;
}
