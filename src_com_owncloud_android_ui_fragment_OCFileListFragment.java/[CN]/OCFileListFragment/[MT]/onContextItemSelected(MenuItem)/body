{
  AdapterContextMenuInfo info=(AdapterContextMenuInfo)item.getMenuInfo();
  mTargetFile=(OCFile)mAdapter.getItem(info.position);
switch (item.getItemId()) {
case R.id.action_rename_file:
{
      String fileName=mTargetFile.getFileName();
      int extensionStart=mTargetFile.isDirectory() ? -1 : fileName.lastIndexOf(".");
      int selectionEnd=(extensionStart >= 0) ? extensionStart : fileName.length();
      EditNameDialog dialog=EditNameDialog.newInstance(getString(R.string.rename_dialog_title),fileName,0,selectionEnd,this);
      dialog.show(getFragmentManager(),EditNameDialog.TAG);
      return true;
    }
case R.id.action_remove_file:
{
    int messageStringId=R.string.confirmation_remove_alert;
    int posBtnStringId=R.string.confirmation_remove_remote;
    int neuBtnStringId=-1;
    if (mTargetFile.isDirectory()) {
      messageStringId=R.string.confirmation_remove_folder_alert;
      posBtnStringId=R.string.confirmation_remove_remote_and_local;
      neuBtnStringId=R.string.confirmation_remove_folder_local;
    }
 else     if (mTargetFile.isDown()) {
      posBtnStringId=R.string.confirmation_remove_remote_and_local;
      neuBtnStringId=R.string.confirmation_remove_local;
    }
    ConfirmationDialogFragment confDialog=ConfirmationDialogFragment.newInstance(messageStringId,new String[]{mTargetFile.getFileName()},posBtnStringId,neuBtnStringId,R.string.common_cancel);
    confDialog.setOnConfirmationListener(this);
    confDialog.show(getFragmentManager(),FileDetailFragment.FTAG_CONFIRMATION);
    return true;
  }
case R.id.action_open_file_with:
{
  String storagePath=mTargetFile.getStoragePath();
  String encodedStoragePath=WebdavUtils.encodePath(storagePath);
  try {
    Intent i=new Intent(Intent.ACTION_VIEW);
    i.setDataAndType(Uri.parse("file://" + encodedStoragePath),mTargetFile.getMimetype());
    i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    startActivity(i);
  }
 catch (  Throwable t) {
    Log_OC.e(TAG,"Fail when trying to open with the mimeType provided from the ownCloud server: " + mTargetFile.getMimetype());
    boolean toastIt=true;
    String mimeType="";
    try {
      Intent i=new Intent(Intent.ACTION_VIEW);
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(storagePath.substring(storagePath.lastIndexOf('.') + 1));
      if (mimeType == null || !mimeType.equals(mTargetFile.getMimetype())) {
        if (mimeType != null) {
          i.setDataAndType(Uri.parse("file://" + encodedStoragePath),mimeType);
        }
 else {
          i.setDataAndType(Uri.parse("file://" + encodedStoragePath),"*/*");
        }
        i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        startActivity(i);
        toastIt=false;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      Log_OC.e(TAG,"Trying to find out MIME type of a file without extension: " + storagePath);
    }
catch (    ActivityNotFoundException e) {
      Log_OC.e(TAG,"No activity found to handle: " + storagePath + " with MIME type "+ mimeType+ " obtained from extension");
    }
catch (    Throwable th) {
      Log_OC.e(TAG,"Unexpected problem when opening: " + storagePath,th);
    }
 finally {
      if (toastIt) {
        Toast.makeText(getActivity(),"There is no application to handle file " + mTargetFile.getFileName(),Toast.LENGTH_SHORT).show();
      }
    }
  }
  return true;
}
case R.id.action_download_file:
case R.id.action_sync_file:
{
Account account=AccountUtils.getCurrentOwnCloudAccount(getSherlockActivity());
RemoteOperation operation=new SynchronizeFileOperation(mTargetFile,null,mContainerActivity.getStorageManager(),account,true,false,getSherlockActivity());
WebdavClient wc=OwnCloudClientUtils.createOwnCloudClient(account,getSherlockActivity().getApplicationContext());
operation.execute(wc,mContainerActivity,mHandler);
getSherlockActivity().showDialog(FileDisplayActivity.DIALOG_SHORT_WAIT);
return true;
}
case R.id.action_cancel_download:
{
FileDownloaderBinder downloaderBinder=mContainerActivity.getFileDownloaderBinder();
Account account=AccountUtils.getCurrentOwnCloudAccount(getActivity());
if (downloaderBinder != null && downloaderBinder.isDownloading(account,mTargetFile)) {
downloaderBinder.cancel(account,mTargetFile);
listDirectory();
mContainerActivity.onTransferStateChanged(mTargetFile,false,false);
}
return true;
}
case R.id.action_cancel_upload:
{
FileUploaderBinder uploaderBinder=mContainerActivity.getFileUploaderBinder();
Account account=AccountUtils.getCurrentOwnCloudAccount(getActivity());
if (uploaderBinder != null && uploaderBinder.isUploading(account,mTargetFile)) {
uploaderBinder.cancel(account,mTargetFile);
listDirectory();
mContainerActivity.onTransferStateChanged(mTargetFile,false,false);
}
return true;
}
case R.id.action_see_details:
{
((FileFragment.ContainerActivity)getActivity()).showFragmentWithDetails(mTargetFile);
return true;
}
default :
return super.onContextItemSelected(item);
}
}
