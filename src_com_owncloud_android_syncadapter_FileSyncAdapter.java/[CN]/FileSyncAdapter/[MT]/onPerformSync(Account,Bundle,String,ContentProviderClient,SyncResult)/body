{
  mCancellation=false;
  mIsManualSync=extras.getBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,false);
  mFailedResultsCounter=0;
  mLastFailedResult=null;
  mConflictsFound=0;
  mFailsInFavouritesFound=0;
  mForgottenLocalFiles=new HashMap<String,String>();
  mSyncResult=syncResult;
  mSyncResult.fullSyncRequested=false;
  mSyncResult.delayUntil=60 * 60 * 24;
  this.setAccount(account);
  this.setContentProvider(provider);
  this.setStorageManager(new FileDataStorageManager(account,provider));
  try {
    this.initClientForCurrentAccount();
  }
 catch (  IOException e) {
    mSyncResult.tooManyRetries=true;
    notifyFailedSynchronization();
    return;
  }
catch (  AccountsException e) {
    mSyncResult.tooManyRetries=true;
    notifyFailedSynchronization();
    return;
  }
  Log_OC.d(TAG,"Synchronization of ownCloud account " + account.name + " starting");
  sendStickyBroadcast(true,null,null);
  try {
    updateOCVersion();
    mCurrentSyncTime=System.currentTimeMillis();
    if (!mCancellation) {
      synchronizeFolder(getStorageManager().getFileByPath(OCFile.ROOT_PATH),true);
    }
 else {
      Log_OC.d(TAG,"Leaving synchronization before synchronizing the root folder because cancelation request");
    }
  }
  finally {
    if (mFailedResultsCounter > 0 && mIsManualSync) {
      mSyncResult.tooManyRetries=true;
      notifyFailedSynchronization();
    }
    if (mConflictsFound > 0 || mFailsInFavouritesFound > 0) {
      notifyFailsInFavourites();
    }
    if (mForgottenLocalFiles.size() > 0) {
      notifyForgottenLocalFiles();
    }
    sendStickyBroadcast(false,null,mLastFailedResult);
  }
}
