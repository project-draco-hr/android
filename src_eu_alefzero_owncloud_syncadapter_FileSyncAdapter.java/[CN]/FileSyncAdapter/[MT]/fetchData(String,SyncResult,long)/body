{
  try {
    Log.v(TAG,"syncing: fetching " + uri);
    boolean logmore=(uri.contains("many-files"));
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, TO REQUEST");
    PropFindMethod query=new PropFindMethod(uri);
    getClient().executeMethod(query);
    MultiStatus resp=null;
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, TO PREPARE THE RESPONSE");
    resp=query.getResponseBodyAsMultiStatus();
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, TO PARSE REPONSES");
    for (int i=1; i < resp.getResponses().length; ++i) {
      if (logmore)       Log.v(TAG,"syncing: fetching many-files, PARSING REPONSE " + i + "-esima");
      WebdavEntry we=new WebdavEntry(resp.getResponses()[i],getUri().getPath());
      OCFile file=fillOCFile(we);
      file.setParentId(parentId);
      getStorageManager().saveFile(file);
      if (parentId == 0)       parentId=file.getFileId();
    }
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, RETRIEVING VECTOR OF FILES");
    Vector<OCFile> files=getStorageManager().getDirectoryContent(getStorageManager().getFileById(parentId));
    for (    OCFile file : files) {
      if (file.getLastSyncDate() != mCurrentSyncTime && file.getLastSyncDate() != 0)       getStorageManager().removeFile(file);
    }
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, NOTIFYING THE UI");
    sendStickyBroadcast(true,parentId);
    if (logmore)     Log.v(TAG,"syncing: fetching many-files, TRYING TO RECURSE");
    files=getStorageManager().getDirectoryContent(getStorageManager().getFileById(parentId));
    for (    OCFile file : files) {
      if (file.getMimetype().equals("DIR")) {
        fetchData(getUri().toString() + file.getRemotePath(),syncResult,file.getFileId());
      }
    }
  }
 catch (  OperationCanceledException e) {
    e.printStackTrace();
  }
catch (  AuthenticatorException e) {
    syncResult.stats.numAuthExceptions++;
    e.printStackTrace();
  }
catch (  IOException e) {
    syncResult.stats.numIoExceptions++;
    e.printStackTrace();
  }
catch (  DavException e) {
    syncResult.stats.numIoExceptions++;
    e.printStackTrace();
  }
}
