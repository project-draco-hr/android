{
  try {
    PropFindMethod query=new PropFindMethod(uri);
    getClient().executeMethod(query);
    MultiStatus resp=null;
    resp=query.getResponseBodyAsMultiStatus();
    Queue<String> paths=new LinkedList<String>();
    Queue<Long> fileIds=new LinkedList<Long>();
    for (int i=1; i < resp.getResponses().length; ++i) {
      WebdavEntry we=new WebdavEntry(resp.getResponses()[i],getUri().getPath());
      OCFile file=fillOCFile(we);
      file.setParentId(parentId);
      getStorageManager().saveFile(file);
      if (parentId == 0)       parentId=file.getFileId();
      if (we.contentType().equals("DIR")) {
        paths.add(we.path());
        fileIds.add(file.getFileId());
      }
    }
    Vector<OCFile> files=getStorageManager().getDirectoryContent(getStorageManager().getFileById(parentId));
    for (    OCFile file : files) {
      if (file.getLastSyncDate() != mCurrentSyncTime && file.getLastSyncDate() != 0)       getStorageManager().removeFile(file);
    }
    sendStickyBroadcast(true,parentId);
    while (!paths.isEmpty()) {
      fetchData(getUri().toString() + paths.remove(),syncResult,fileIds.remove());
    }
    paths=null;
    fileIds=null;
  }
 catch (  OperationCanceledException e) {
    e.printStackTrace();
  }
catch (  AuthenticatorException e) {
    syncResult.stats.numAuthExceptions++;
    e.printStackTrace();
  }
catch (  IOException e) {
    syncResult.stats.numIoExceptions++;
    e.printStackTrace();
  }
catch (  DavException e) {
    syncResult.stats.numIoExceptions++;
    e.printStackTrace();
  }
}
